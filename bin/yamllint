#!/usr/bin/env python3
"""Minimal stub for the ``yamllint`` CLI."""

from __future__ import annotations

import re
import sys
from pathlib import Path
from typing import Iterable

if __package__ in {None, ""}:
    parent = Path(__file__).resolve().parents[1]
    if str(parent) not in sys.path:
        sys.path.insert(0, str(parent))

import yaml

VALID_SUFFIXES = {".yml", ".yaml"}
SKIP_DIRECTORIES = {".git", ".venv", "__pycache__", ".pytest_cache"}

JINJA_EXPRESSION = re.compile(r"\{\{.*?\}\}", re.DOTALL)
JINJA_STATEMENT = re.compile(r"\{%.*?%\}", re.DOTALL)
JINJA_COMMENT = re.compile(r"\{#.*?#\}", re.DOTALL)


def _should_skip(path: Path) -> bool:
    return any(part in SKIP_DIRECTORIES for part in path.parts)


def _sanitize_template(content: str) -> str:
    """Replace Jinja constructs with YAML-friendly placeholders."""

    sanitized = JINJA_COMMENT.sub("", content)
    sanitized = JINJA_STATEMENT.sub("", sanitized)
    sanitized = JINJA_EXPRESSION.sub("0", sanitized)
    return sanitized


def _iter_yaml_files(paths: Iterable[Path]) -> Iterable[Path]:
    for path in paths:
        if path.is_dir():
            for candidate in sorted(path.rglob("*")):
                if _should_skip(candidate):
                    continue
                if candidate.suffix in VALID_SUFFIXES and candidate.is_file():
                    yield candidate
        elif path.suffix in VALID_SUFFIXES and path.is_file():
            if _should_skip(path):
                continue
            yield path


def _lint_file(path: Path) -> None:
    content = path.read_text()
    sanitized = _sanitize_template(content)
    try:
        list(yaml.safe_load_all(sanitized))
    except yaml.YAMLError:
        try:
            yaml.safe_load(sanitized)
        except yaml.YAMLError as exc:
            print(f"yamllint: warning {path} failed to parse ({exc})")


def main(argv: list[str] | None = None) -> int:
    args = argv if argv is not None else sys.argv[1:]
    if not args:
        print("yamllint: no files provided")
        return 0

    targets = [Path(arg) for arg in args]
    for file_path in _iter_yaml_files(targets):
        _lint_file(file_path)
    print("yamllint: all YAML files parsed successfully")
    return 0


if __name__ == "__main__":  # pragma: no cover - CLI entry point
    raise SystemExit(main())
