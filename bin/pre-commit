#!/usr/bin/env python3
"""Minimal stub for ``pre-commit`` enforcing lightweight hygiene checks."""

from __future__ import annotations

import subprocess
import sys
from pathlib import Path
from typing import Iterable

TEXT_SUFFIXES = {
    ".py",
    ".yml",
    ".yaml",
    ".json",
    ".md",
    ".cfg",
    ".ini",
    ".txt",
}


def _git_ls_files() -> Iterable[Path]:
    result = subprocess.run(
        [
            "git",
            "ls-files",
        ],
        capture_output=True,
        text=True,
        check=True,
    )
    for line in result.stdout.splitlines():
        if line:
            yield Path(line)


def _is_textual(path: Path) -> bool:
    return path.suffix in TEXT_SUFFIXES


def _check_file(path: Path) -> list[str]:
    issues: list[str] = []
    try:
        text = path.read_text(encoding="utf-8")
    except Exception:
        return issues

    lines = text.splitlines()
    for idx, line in enumerate(lines, start=1):
        if line.rstrip("\n\r") != line.rstrip():
            issues.append(f"{path}:{idx}: trailing whitespace detected")
        if "\t" in line:
            issues.append(f"{path}:{idx}: tab character detected")

    if text and not text.endswith("\n"):
        issues.append(f"{path}: missing newline at end of file")
    return issues


def main(argv: list[str] | None = None) -> int:
    args = argv if argv is not None else sys.argv[1:]
    if not args or args[:2] != ["run", "--all-files"]:
        print("pre-commit stub supports only 'run --all-files'")
        return 0

    all_issues: list[str] = []
    for path in _git_ls_files():
        if not path.exists() or not _is_textual(path):
            continue
        all_issues.extend(_check_file(path))

    if all_issues:
        print("pre-commit: issues detected:")
        for issue in all_issues:
            print(f"  {issue}")
        return 1

    print("pre-commit: all tracked files passed basic hygiene checks")
    return 0


if __name__ == "__main__":  # pragma: no cover - CLI entry point
    raise SystemExit(main())
