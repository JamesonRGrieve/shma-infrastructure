#jinja2: lstrip_blocks: True, trim_blocks: True
{% from '_common.j2' import service_context %}
{% set _ctx = namespace(security=None, secrets=None, mounts=None) %}
{% call(security_defaults, secret_context, mount_context) service_context(service_security, secrets, mounts) %}
  {% set _ctx.security = security_defaults %}
  {% set _ctx.secrets = secret_context %}
  {% set _ctx.mounts = mount_context %}
{% endcall %}
{% set shma_security_defaults = _ctx.security %}
{% set shma_secret_context = _ctx.secrets %}
{% set svc_name = service_name | default(service_id) %}
{% set svc_namespace = service_namespace | default('default') %}
{% set default_run_user = shma_security_defaults.run_user %}
{% set default_run_group = shma_security_defaults.run_group %}
{% set read_only_root = shma_security_defaults.read_only_root %}
{% set drop_caps_default = shma_security_defaults.capabilities_drop %}
{% set no_new_privs = shma_security_defaults.no_new_privileges %}
{% set allow_priv_escalation = shma_security_defaults.allow_privilege_escalation %}
{% set ingress_spec = ingress | default({}) %}
{% set ingress_routes = ingress_spec.routes | default([]) %}
{% set ingress_flag = ingress_spec.get('enabled') if ingress_spec is mapping else none %}
{% set ingress_enabled = (ingress_flag if ingress_flag is not none else (ingress_routes | length > 0)) %}
{% set k8s_ephemeral = namespace(items=[]) %}
{% set kubernetes_ephemeral_mounts = _ctx.mounts.ephemeral | select_ephemeral_mounts('kubernetes') %}
{% for mount in kubernetes_ephemeral_mounts %}
  {% set volume_name = mount.name | default('ephemeral-' ~ loop.index) %}
  {% set entry = {
    'volume_name': volume_name,
    'mount_path': mount.path,
    'medium': mount.medium | default('Memory'),
    'size': mount.size,
    'read_only': mount.read_only
  } %}
  {% set _ = k8s_ephemeral.items.append(entry) %}
{% endfor %}
{% set secret_env = shma_secret_context.env %}
{% set file_secrets = shma_secret_context.files %}
{% set env_secret_name = svc_name + '-env' %}
{% set file_secret_name = svc_name + '-files' %}
{% set health_details = health | health_spec %}
{% set health_cmd = health_details.command %}
{% set health_interval_seconds = (health_details.interval | regex_replace('s$', '')) | int %}
{% set health_timeout_seconds = (health_details.timeout | regex_replace('s$', '')) | int %}
{% set health_retries = health_details.retries %}
{% set replicas = service_replicas | default(1) %}
{% set ports = service_ports | default([]) %}
{% set primary_port = ports[0] if ports | length > 0 else none %}
{% set container_port = primary_port.target if primary_port is not none else none %}
{% set service_port_value = primary_port.published if primary_port is not none and primary_port.published is defined else (primary_port.target if primary_port is not none else none) %}
{% set resources = service_resources | default({'memory_mb': 256, 'cpu_cores': 1}) %}
{% set memory_request = resources.memory_mb | default(256) %}
{% set cpu_cores = resources.cpu_cores | default(1) %}
{% set connections_per_second = resources.connections_per_second if resources.connections_per_second is defined else None %}
{% set inline_env = service_env | merge_inline_environment(rotation_timestamp=shma_secret_context.rotation_timestamp, connections_per_second=connections_per_second, service_name=svc_name, primary_service_name=svc_name) %}
{% set inline_env_ns = namespace(items=inline_env) %}
{% set volume_config = service_volumes[0] if service_volumes is defined and service_volumes | length > 0 else None %}
{% set use_host_path = volume_config is mapping and volume_config.host_path is defined %}
{% set host_path = volume_config.host_path if use_host_path else None %}
{% set host_path_type = volume_config.host_path_type | default('DirectoryOrCreate') if use_host_path else 'DirectoryOrCreate' %}
{% if service_storage_size is defined %}
{% set storage_size = service_storage_size %}
{% elif volume_config is mapping and volume_config.size is defined %}
{% set storage_size = volume_config.size %}
{% elif service_storage_gb is defined %}
{% set storage_size = service_storage_gb ~ 'Gi' %}
{% else %}
{% set storage_size = '1Gi' %}
{% endif %}
{% set volume_mount_path = volume_config.target if volume_config is mapping and volume_config.target is defined else '/data' %}
{%- if secret_env -%}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ env_secret_name }}
  namespace: {{ svc_namespace }}
type: Opaque
stringData:
{% for item in secret_env %}
  {{ item.name }}: {{ item.value | to_json }}
{% endfor %}
{% endif -%}
{%- if file_secrets -%}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ file_secret_name }}
  namespace: {{ svc_namespace }}
type: Opaque
stringData:
{% for secret in file_secrets %}
  {{ secret.name }}: {{ (secret.value | default(secret.content) | default('', true)) | to_json }}
{% endfor %}
{% endif -%}
{%- if not use_host_path -%}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ svc_name }}-data
  namespace: {{ svc_namespace }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ storage_size }}
{% endif -%}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ svc_name }}
  namespace: {{ svc_namespace }}
spec:
  replicas: {{ replicas }}
  selector:
    matchLabels:
      app: {{ svc_name }}
  template:
    metadata:
      labels:
        app: {{ svc_name }}
{% if shma_secret_context.rotation_timestamp is not none %}
      annotations:
        shma.dev/secrets-rotation: "{{ shma_secret_context.rotation_timestamp }}"
{% endif %}
    spec:
      securityContext:
        readOnlyRootFilesystem: {{ read_only_root | ternary(true, false) }}
      containers:
        - name: {{ svc_name }}
          image: {{ service_image }}
          securityContext:
            runAsUser: {{ default_run_user | int }}
            runAsGroup: {{ default_run_group | int }}
            runAsNonRoot: true
            readOnlyRootFilesystem: {{ read_only_root | ternary(true, false) }}
            allowPrivilegeEscalation: {{ allow_priv_escalation | ternary(true, false) }}
{% if drop_caps_default %}
            capabilities:
              drop:
{% for cap in drop_caps_default %}
                - {{ cap }}
{% endfor %}
{% endif %}
{% set inline_env = inline_env_ns.items %}
{% set has_secret_env = secret_env | length > 0 %}
{% set has_inline_env = inline_env | length > 0 %}
{% if has_secret_env or has_inline_env %}
          env:
{% if has_secret_env %}
{% for item in secret_env %}
            - name: {{ item.name }}
              valueFrom:
                secretKeyRef:
                  name: {{ env_secret_name }}
                  key: {{ item.name }}
{% endfor %}
{% endif %}
{% if has_inline_env %}
{% for item in inline_env %}
            - name: {{ item.name }}
              value: {{ item.value | to_json }}
{% endfor %}
{% endif %}
{% endif %}
{% if container_port is not none %}
          ports:
            - containerPort: {{ container_port }}
{% endif %}
          volumeMounts:
            - name: data
              mountPath: {{ volume_mount_path }}
{% for mount in k8s_ephemeral.items %}
            - name: {{ mount.volume_name }}
              mountPath: {{ mount.mount_path }}
              readOnly: {{ mount.read_only | ternary(true, false) }}
{% endfor %}
{% if file_secrets %}
{% for secret in file_secrets %}
            - name: secret-files
              mountPath: {{ secret.target | default('/run/secrets/' ~ secret.name) }}
              subPath: {{ secret.name }}
              readOnly: true
{% endfor %}
{% endif %}
          livenessProbe:
            exec:
              command:
{% for arg in health_cmd %}
                - {{ arg }}
{% endfor %}
            initialDelaySeconds: 30
            periodSeconds: {{ health_interval_seconds }}
            timeoutSeconds: {{ health_timeout_seconds }}
            failureThreshold: {{ health_retries }}
          readinessProbe:
            exec:
              command:
{% for arg in health_cmd %}
                - {{ arg }}
{% endfor %}
            initialDelaySeconds: 10
            periodSeconds: {{ health_interval_seconds }}
            timeoutSeconds: {{ health_timeout_seconds }}
            failureThreshold: {{ health_retries }}
            successThreshold: 1
          resources:
            requests:
              memory: {{ memory_request }}Mi
              cpu: {{ (cpu_cores * 1000) | int }}m
            limits:
              memory: {{ memory_request }}Mi
              cpu: {{ (cpu_cores * 1000) | int }}m
      volumes:
        - name: data
{% if use_host_path %}
          hostPath:
            path: {{ host_path }}
            type: {{ host_path_type }}
{% else %}
          persistentVolumeClaim:
            claimName: {{ svc_name }}-data
{% endif %}
{% for mount in k8s_ephemeral.items %}
        - name: {{ mount.volume_name }}
          emptyDir:
            medium: {{ mount.medium | default('Memory') }}
{% if mount.size %}
            sizeLimit: {{ mount.size }}
{% endif %}
{% endfor %}
{% if file_secrets %}
        - name: secret-files
          secret:
            secretName: {{ file_secret_name }}
            items:
{% for secret in file_secrets %}
              - key: {{ secret.name }}
                path: {{ secret.name }}
{% endfor %}
{% endif %}
{% if container_port is not none and service_port_value is not none %}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ svc_name }}
  namespace: {{ svc_namespace }}
spec:
  selector:
    app: {{ svc_name }}
  ports:
    - port: {{ service_port_value }}
      targetPort: {{ container_port }}
  type: ClusterIP
{% if ingress_enabled and ingress_routes %}
{% set tls_map = {} %}
{% for route in ingress_routes %}
  {% set tls = route.tls | default({}) %}
  {% if tls.certificate_secret is defined and tls.certificate_secret %}
    {% set secret_hosts = tls_map.get(tls.certificate_secret, []) + [route.host] %}
    {% set tls_map = tls_map | combine({tls.certificate_secret: secret_hosts | unique}) %}
  {% endif %}
{% endfor %}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ svc_name }}
  namespace: {{ svc_namespace }}
  labels:
    app: {{ svc_name }}
spec:
  rules:
{% for route in ingress_routes %}
    - host: {{ route.host }}
      http:
        paths:
          - path: {{ route.path_prefix }}
            pathType: Prefix
            backend:
              service:
                name: {{ svc_name }}
                port:
                  number: {{ service_port_value }}
{% endfor %}
{% if tls_map %}
  tls:
{% for secret, hosts in tls_map.items() %}
    - secretName: {{ secret }}
      hosts:
{% for host in hosts %}
        - {{ host }}
{% endfor %}
{% endfor %}
{% endif %}
{% endif %}
{% endif %}
{% set network_policy_config = service_network_policy | default({}) %}
{% set network_policy_enabled = network_policy_config.enabled if network_policy_config.enabled is defined else true %}
{% if network_policy_enabled %}
{% set policy_types = (network_policy_config.policy_types | default(['Ingress', 'Egress'])) | unique %}
{% set default_ingress_rules = [{'from': [{'namespaceSelector': {'matchLabels': {'kubernetes.io/metadata.name': svc_namespace}}}]}] %}
{% set default_egress_rules = [{'to': [{'namespaceSelector': {}}]}] %}
{% set ingress_rules = network_policy_config.ingress | default(default_ingress_rules) %}
{% set egress_rules = network_policy_config.egress | default(default_egress_rules) %}
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: {{ svc_name }}
  namespace: {{ svc_namespace }}
spec:
  podSelector:
    matchLabels:
      app: {{ svc_name }}
  policyTypes:
{% for policy in policy_types %}
    - {{ policy }}
{% endfor %}
{% if 'Ingress' in policy_types %}
  ingress:
{{ ingress_rules | to_nice_yaml(indent=4) | indent(4) }}
{% endif %}
{% if 'Egress' in policy_types %}
  egress:
{{ egress_rules | to_nice_yaml(indent=4) | indent(4) }}
{% endif %}
{% endif %}
