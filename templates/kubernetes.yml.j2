{% set svc_name = service_name | default(service_id) %}
{% set namespace = service_namespace | default('default') %}
{% set secret_env = secrets.env if secrets is defined and secrets.env is not none and secrets.env | length > 0 else [] %}
{% set file_secrets = secrets.files if secrets is defined and secrets.files is not none and secrets.files | length > 0 else [] %}
{% set env_secret_name = svc_name + '-env' %}
{% set file_secret_name = svc_name + '-files' %}
{% set health_cmd = health.cmd | default(['true']) %}
{% set health_interval_seconds = (health.interval | default('10s')) | regex_replace('s$', '') | int %}
{% set health_timeout_seconds = (health.timeout | default('5s')) | regex_replace('s$', '') | int %}
{% set health_retries = health.retries | default(3) %}
{% set replicas = service_replicas | default(1) %}
{% set ports = service_ports | default((service_port is defined) | ternary([service_port], [])) %}
{% set container_port = ports[0].target if ports | length > 0 else 8080 %}
{% set service_port = ports[0].published if ports | length > 0 and ports[0].published is defined else container_port %}
{% set resources = service_resources | default({'memory_mb': 256, 'cpu_cores': 1}) %}
{% set memory_request = resources.memory_mb | default(256) %}
{% set cpu_cores = resources.cpu_cores | default(1) %}
{% set volume_config = service_volume | default(service_volumes[0] if service_volumes is defined and service_volumes | length > 0 else None) %}
{% if service_storage_size is defined %}
{% set storage_size = service_storage_size %}
{% elif volume_config is mapping and volume_config.size is defined %}
{% set storage_size = volume_config.size %}
{% elif service_storage_gb is defined %}
{% set storage_size = service_storage_gb ~ 'Gi' %}
{% else %}
{% set storage_size = '1Gi' %}
{% endif %}
{% set volume_mount_path = volume_config.target if volume_config is mapping and volume_config.target is defined else '/data' %}
{% if secret_env %}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ env_secret_name }}
  namespace: {{ namespace }}
type: Opaque
stringData:
{% for item in secret_env %}
  {{ item.name }}: {{ item.value | to_json }}
{% endfor %}
{% endif %}
{% if file_secrets %}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ file_secret_name }}
  namespace: {{ namespace }}
type: Opaque
stringData:
{% for secret in file_secrets %}
  {{ secret.name }}: {{ (secret.value | default(secret.content) | default('', true)) | to_json }}
{% endfor %}
{% endif %}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ svc_name }}-data
  namespace: {{ namespace }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ storage_size }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ svc_name }}
  namespace: {{ namespace }}
spec:
  replicas: {{ replicas }}
  selector:
    matchLabels:
      app: {{ svc_name }}
  template:
    metadata:
      labels:
        app: {{ svc_name }}
    spec:
      containers:
        - name: {{ svc_name }}
          image: {{ service_image }}
          env:
{% for item in secret_env %}
            - name: {{ item.name }}
              valueFrom:
                secretKeyRef:
                  name: {{ env_secret_name }}
                  key: {{ item.name }}
{% endfor %}
{% for item in service_env | default([]) %}
            - name: {{ item.name }}
              value: {{ item.value }}
{% endfor %}
          ports:
            - containerPort: {{ container_port }}
          volumeMounts:
            - name: data
              mountPath: {{ volume_mount_path }}
{% if file_secrets %}
{% for secret in file_secrets %}
            - name: secret-files
              mountPath: {{ secret.target | default('/run/secrets/' ~ secret.name) }}
              subPath: {{ secret.name }}
              readOnly: true
{% endfor %}
{% endif %}
          livenessProbe:
            exec:
              command:
{% for arg in health_cmd %}
                - {{ arg }}
{% endfor %}
            initialDelaySeconds: 30
            periodSeconds: {{ health_interval_seconds }}
            timeoutSeconds: {{ health_timeout_seconds }}
            failureThreshold: {{ health_retries }}
          readinessProbe:
            exec:
              command:
{% for arg in health_cmd %}
                - {{ arg }}
{% endfor %}
            initialDelaySeconds: 10
            periodSeconds: {{ health_interval_seconds }}
            timeoutSeconds: {{ health_timeout_seconds }}
            failureThreshold: {{ health_retries }}
            successThreshold: 1
          resources:
            requests:
              memory: {{ memory_request }}Mi
              cpu: {{ (cpu_cores * 1000) | int }}m
            limits:
              memory: {{ memory_request }}Mi
              cpu: {{ (cpu_cores * 1000) | int }}m
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: {{ svc_name }}-data
{% if file_secrets %}
        - name: secret-files
          secret:
            secretName: {{ file_secret_name }}
            items:
{% for secret in file_secrets %}
              - key: {{ secret.name }}
                path: {{ secret.name }}
{% endfor %}
{% endif %}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ svc_name }}
  namespace: {{ namespace }}
spec:
  selector:
    app: {{ svc_name }}
  ports:
    - port: {{ service_port }}
      targetPort: {{ container_port }}
  type: ClusterIP
