{% from '_common.j2' import service_context %}
{% set _ctx = namespace(security=None, secrets=None, mounts=None) %}
{% call(security_defaults, secret_context, mount_context) service_context(service_security, secrets, mounts) %}
  {% set _ctx.security = security_defaults %}
  {% set _ctx.secrets = secret_context %}
  {% set _ctx.mounts = mount_context %}
{% endcall %}
{% set shma_security_defaults = _ctx.security %}
{% set shma_secret_context = _ctx.secrets %}
{% set podman_ephemeral_mounts = _ctx.mounts.ephemeral | select_ephemeral_mounts('podman') %}
{% set default_run_user = shma_security_defaults.run_user %}
{% set default_run_group = shma_security_defaults.run_group %}
{% set quadlet_user = shma_security_defaults.compose_user if shma_security_defaults.compose_user is not none else ((default_run_user | string) ~ ':' ~ (default_run_group | string)) %}
{% set read_only_root = shma_security_defaults.read_only_root %}
{% set drop_caps_default = shma_security_defaults.capabilities_drop %}
{% set no_new_privs = shma_security_defaults.no_new_privileges %}
{% set bounding_set = shma_security_defaults.capability_bounding_set %}
{% set tmpfs_hardening_flags = ['nosuid', 'nodev', 'noexec'] %}
{% set podman_tmpfs = namespace(entries=[]) %}
{% for mount in podman_ephemeral_mounts %}
  {% set existing = none %}
  {% for item in podman_tmpfs.entries %}
    {% if item.path == mount.path %}
      {% set existing = item %}
    {% endif %}
  {% endfor %}
  {% if existing is none %}
    {% set existing = namespace(path=mount.path, options=[]) %}
    {% set _ = podman_tmpfs.entries.append(existing) %}
  {% endif %}
  {% for flag in tmpfs_hardening_flags %}
    {% if flag not in existing.options %}{% set _ = existing.options.append(flag) %}{% endif %}
  {% endfor %}
  {% if mount.size is not none %}
    {% set size_flag = 'size=' ~ mount.size %}
    {% if size_flag not in existing.options %}{% set _ = existing.options.append(size_flag) %}{% endif %}
  {% endif %}
  {% if mount.mode is not none %}
    {% set mode_flag = 'mode=' ~ mount.mode %}
    {% if mode_flag not in existing.options %}{% set _ = existing.options.append(mode_flag) %}{% endif %}
  {% endif %}
{% endfor %}
{% set secret_env = shma_secret_context.env %}
{% set file_secrets = shma_secret_context.files %}
{% set quadlet_scope_value = quadlet_scope | default('system') %}
{% if quadlet_scope_value == 'user' %}
{% set quadlet_base_dir = '%h/.config/containers/systemd' %}
{% else %}
{% set quadlet_base_dir = '/etc/containers/systemd' %}
{% endif %}
{% set env_file_path = quadlet_base_dir ~ '/' ~ (service_name | default(service_id)) ~ '.env' %}
{% set secret_dir = quadlet_base_dir ~ '/secrets' %}
{% set ports = service_ports | default([]) %}
{% set volumes = service_volumes | default([]) %}
{% set resources = service_resources | default({}) %}
{% set connections_per_second = resources.connections_per_second if resources.connections_per_second is defined else None %}
{% set inline_env = service_env | merge_inline_environment(rotation_timestamp=shma_secret_context.rotation_timestamp, connections_per_second=connections_per_second, service_name=service_name | default(service_id), primary_service_name=service_name | default(service_id)) %}
{% set inline_env_names = inline_env | map(attribute='name') | list %}
{% set user_namespace = security.user_namespace if security.user_namespace is defined else none %}
{% set auto_update_mode = quadlet_auto_update | default('none') %}
{% set health_details = health | health_spec %}
[Unit]
Description={{ unit_description }}
After=network-online.target
Wants=network-online.target

[Container]
Image={{ service_image }}
ContainerName={{ service_name | default(service_id) }}
AutoUpdate={{ auto_update_mode }}
User={{ quadlet_user }}
ReadOnly={{ 'true' if read_only_root else 'false' }}
NoNewPrivileges={{ 'true' if no_new_privs else 'false' }}
{% for cap in drop_caps_default %}
DropCapability={{ cap }}
{% endfor %}
{% if user_namespace is not none and (user_namespace | string) | length > 0 %}
UserNS={{ user_namespace }}
{% endif %}
{% for env in inline_env %}
Environment={{ env.name }}={{ env.value }}
{% endfor %}
{% if secret_env %}
EnvironmentFile={{ env_file_path }}
{% endif %}
{% for vol in volumes %}
{% if vol.host_path is defined %}
Volume={{ vol.host_path }}:{{ vol.target }}:{% if vol.mode is defined %}{{ vol.mode }}{% else %}Z{% endif %}
{% else %}
Volume={{ vol.source | default(vol.name) }}.volume:{{ vol.target }}:{% if vol.mode is defined %}{{ vol.mode }}{% else %}Z{% endif %}
{% endif %}
{% endfor %}
{% for secret in file_secrets %}
Volume={{ secret_dir }}/{{ secret.name }}:{{ secret.target | default('/run/secrets/' ~ secret.name) }}:ro,Z
{% endfor %}
{% for entry in podman_tmpfs.entries %}
{% set tmpfs_value = entry.path %}
{% if entry.options %}{% set tmpfs_value = tmpfs_value ~ ':' ~ entry.options | join(',') %}{% endif %}
Tmpfs={{ tmpfs_value }}
{% endfor %}
{% for port in ports %}
PublishPort={{ port.host_ip | default('') }}{% if port.host_ip is defined and port.host_ip | string | length > 0 %}:{% endif %}{{ port.published | default(port.target) }}:{{ port.target }}{% if port.protocol is defined %}/{{ port.protocol }}{% endif %}
{% endfor %}
HealthCmd={{ health_details.command | join(' ') }}
HealthInterval={{ health_details.interval }}
HealthTimeout={{ health_details.timeout }}
HealthRetries={{ health_details.retries }}

[Service]
Restart=always
TimeoutStartSec=900
NoNewPrivileges={{ 'yes' if no_new_privs else 'no' }}
{% if bounding_set %}
CapabilityBoundingSet={{ bounding_set | join(' ') }}
{% endif %}

[Install]
WantedBy=multi-user.target default.target
