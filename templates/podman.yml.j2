{% from '_common.j2' import with_defaults %}
{% set _defaults_ctx = namespace(security=None, catalog=None) %}
{% call(defaults, catalog) with_defaults(service_security, secrets) %}
  {% set _defaults_ctx.security = defaults %}
  {% set _defaults_ctx.catalog = catalog %}
{% endcall %}
{% set shma_security_defaults = _defaults_ctx.security %}
{% set mounts_config = mounts | default({}) %}
{% set ephemeral_mounts = mounts_config.ephemeral_mounts | default([]) %}
{% set default_apply_targets = ['docker', 'podman', 'kubernetes', 'proxmox', 'baremetal'] %}
{% set default_run_user = shma_security_defaults.run_user %}
{% set default_run_group = shma_security_defaults.run_group %}
{% set quadlet_user = shma_security_defaults.compose_user if shma_security_defaults.compose_user is not none else ((default_run_user | string) ~ ':' ~ (default_run_group | string)) %}
{% set read_only_root = shma_security_defaults.read_only_root %}
{% set drop_caps_default = shma_security_defaults.capabilities_drop %}
{% set no_new_privs = shma_security_defaults.no_new_privileges %}
{% set bounding_set = shma_security_defaults.capability_bounding_set %}
{% set tmpfs_hardening_flags = ['nosuid', 'nodev', 'noexec'] %}
{% set podman_tmpfs = namespace(items=[]) %}
{% for mount in ephemeral_mounts %}
  {% set apply_targets = mount.apply_to | default(default_apply_targets) %}
  {% if 'podman' in apply_targets %}
    {% set options = [] %}
    {% for flag in tmpfs_hardening_flags %}
      {% if flag not in options %}{% set _ = options.append(flag) %}{% endif %}
    {% endfor %}
    {% if mount.size is defined %}{% set _ = options.append('size=' ~ mount.size) %}{% endif %}
    {% if mount.mode is defined %}{% set _ = options.append('mode=' ~ mount.mode) %}{% endif %}
    {% set entry = mount.path %}
    {% if options %}{% set entry = entry ~ ':' ~ options | join(',') %}{% endif %}
    {% if entry not in podman_tmpfs.items %}{% set _ = podman_tmpfs.items.append(entry) %}{% endif %}
  {% endif %}
{% endfor %}
{% set secret_env = secrets.env if secrets is defined and secrets.env is not none and secrets.env | length > 0 else [] %}
{% set file_secrets = secrets.files if secrets is defined and secrets.files is not none and secrets.files | length > 0 else [] %}
{% set quadlet_scope_value = quadlet_scope | default('system') %}
{% if quadlet_scope_value == 'user' %}
{% set quadlet_base_dir = '%h/.config/containers/systemd' %}
{% else %}
{% set quadlet_base_dir = '/etc/containers/systemd' %}
{% endif %}
{% set env_file_path = quadlet_base_dir ~ '/' ~ (service_name | default(service_id)) ~ '.env' %}
{% set secret_dir = quadlet_base_dir ~ '/secrets' %}
{% set ports = service_ports | default([]) %}
{% set volumes = service_volumes | default([]) %}
{% set inline_env = service_env | default([]) %}
{% set inline_env_names = inline_env | map(attribute='name') | list %}
{% set resources = service_resources | default({}) %}
{% if resources.connections_per_second is defined %}
  {% set inline_env = inline_env + [{'name': 'CONNECTIONS_PER_SECOND', 'value': resources.connections_per_second | string}] %}
{% endif %}
{% set auto_update_mode = quadlet_auto_update | default('none') %}
{% set health_cmd = health | health_command %}
[Unit]
Description={{ service_unit_description | default('Managed container for ' ~ (service_name | default(service_id))) }}
After=network-online.target
Wants=network-online.target

[Container]
Image={{ service_image }}
ContainerName={{ service_name | default(service_id) }}
AutoUpdate={{ auto_update_mode }}
User={{ quadlet_user }}
ReadOnly={{ 'true' if read_only_root else 'false' }}
NoNewPrivileges={{ 'true' if no_new_privs else 'false' }}
{% for cap in drop_caps_default %}
DropCapability={{ cap }}
{% endfor %}
{% for env in inline_env %}
Environment={{ env.name }}={{ env.value }}
{% endfor %}
{% if secrets is defined and secrets.rotation_timestamp is defined and secrets.rotation_timestamp is not none and 'SHMA_SECRETS_ROTATION' not in inline_env_names %}
Environment=SHMA_SECRETS_ROTATION={{ secrets.rotation_timestamp }}
{% endif %}
{% if secret_env %}
EnvironmentFile={{ env_file_path }}
{% endif %}
{% for vol in volumes %}
{% if vol.host_path is defined %}
Volume={{ vol.host_path }}:{{ vol.target }}:{% if vol.mode is defined %}{{ vol.mode }}{% else %}Z{% endif %}
{% else %}
Volume={{ vol.source | default(vol.name) }}.volume:{{ vol.target }}:{% if vol.mode is defined %}{{ vol.mode }}{% else %}Z{% endif %}
{% endif %}
{% endfor %}
{% for secret in file_secrets %}
Volume={{ secret_dir }}/{{ secret.name }}:{{ secret.target | default('/run/secrets/' ~ secret.name) }}:ro,Z
{% endfor %}
{% for entry in podman_tmpfs.items %}
Tmpfs={{ entry }}
{% endfor %}
{% for port in ports %}
PublishPort={{ port.host_ip | default('') }}{% if port.host_ip is defined and port.host_ip | string | length > 0 %}:{% endif %}{{ port.published | default(port.target) }}:{{ port.target }}{% if port.protocol is defined %}/{{ port.protocol }}{% endif %}
{% endfor %}
HealthCmd={{ health_cmd | join(' ') }}
HealthInterval={{ health.interval | default('10s') }}
HealthTimeout={{ health.timeout | default('5s') }}
HealthRetries={{ health.retries | default(3) }}

[Service]
Restart=always
TimeoutStartSec=900
NoNewPrivileges={{ 'yes' if no_new_privs else 'no' }}
{% if bounding_set %}
CapabilityBoundingSet={{ bounding_set | join(' ') }}
{% else %}
CapabilityBoundingSet=
{% endif %}

[Install]
WantedBy=multi-user.target default.target
