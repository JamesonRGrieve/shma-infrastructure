{%- set mounts_config = mounts | default({}) %}
{%- set ephemeral_mounts = mounts_config.ephemeral_mounts | default([]) %}
{%- set default_apply_targets = ['docker', 'podman', 'kubernetes', 'proxmox', 'baremetal'] %}
{%- set security = service_security | default({}) %}
{%- set default_run_user = security.run_as_user if security.run_as_user is defined else 65532 %}
{%- set default_run_group = security.run_as_group if security.run_as_group is defined else default_run_user %}
{%- set compose_user_default = security.user if security.user is defined else ((default_run_user | string) ~ ':' ~ (default_run_group | string)) %}
{%- set read_only_root = security.read_only_root_filesystem if security.read_only_root_filesystem is defined else true %}
{%- set drop_caps_default = security.capabilities_drop | default(['ALL']) %}
{%- if drop_caps_default is string %}{%- set drop_caps_default = [drop_caps_default] %}{%- endif %}
{%- set no_new_privs = security.no_new_privileges if security.no_new_privileges is defined else true %}
{%- set docker_tmpfs = namespace(items=[]) %}
{%- for mount in ephemeral_mounts %}
  {%- set apply_targets = mount.apply_to | default(default_apply_targets) %}
  {%- if 'docker' in apply_targets %}
    {%- set options = [] %}
    {%- if mount.size is defined %}{%- set _ = options.append('size=' ~ mount.size) %}{%- endif %}
    {%- if mount.mode is defined %}{%- set _ = options.append('mode=' ~ mount.mode) %}{%- endif %}
    {%- set entry = mount.path %}
    {%- if options %}{%- set entry = entry ~ ':' ~ options | join(',') %}{%- endif %}
    {%- if entry not in docker_tmpfs.items %}{%- set _ = docker_tmpfs.items.append(entry) %}{%- endif %}
  {%- endif %}
{%- endfor %}
{% set services_list = services | default([{
  'name': service_name | default(service_id),
  'container_name': service_name | default(service_id),
  'image': service_image,
  'env': service_env | default([]),
  'ports': service_ports | default((service_port is defined) | ternary([service_port], [])),
  'volumes': service_volumes | default([]),
  'networks': service_networks | default(['app-network'])
}]) %}
{% set secret_env = secrets.env if secrets is defined and secrets.env is not none and secrets.env | length > 0 else [] %}
{% set file_secrets = secrets.files if secrets is defined and secrets.files is not none and secrets.files | length > 0 else [] %}
services:
{% for svc in services_list %}
  {%- set svc_user = svc.user if svc.user is defined else compose_user_default %}
  {%- set svc_read_only = svc.read_only if svc.read_only is defined else read_only_root %}
  {%- set svc_cap_drop = svc.cap_drop if svc.cap_drop is defined else drop_caps_default %}
  {%- if svc_cap_drop is string %}{%- set svc_cap_drop = [svc_cap_drop] %}{%- endif %}
  {%- set svc_security_opt = namespace(items=[]) %}
  {%- if svc.security_opt is defined and svc.security_opt %}
    {%- for opt in svc.security_opt %}
      {%- set _ = svc_security_opt.items.append(opt) %}
    {%- endfor %}
  {%- endif %}
  {%- if no_new_privs %}
    {%- if 'no-new-privileges:true' not in svc_security_opt.items %}
      {%- set _ = svc_security_opt.items.append('no-new-privileges:true') %}
    {%- endif %}
  {%- endif %}
  {%- set svc_tmpfs = namespace(items=[]) %}
  {%- if svc.tmpfs is defined and svc.tmpfs %}
    {%- for item in svc.tmpfs %}
      {%- if item not in svc_tmpfs.items %}{%- set _ = svc_tmpfs.items.append(item) %}{%- endif %}
    {%- endfor %}
  {%- endif %}
  {%- for entry in docker_tmpfs.items %}
    {%- if entry not in svc_tmpfs.items %}{%- set _ = svc_tmpfs.items.append(entry) %}{%- endif %}
  {%- endfor %}
  {{ svc.name }}:
    image: {{ svc.image }}
    container_name: {{ svc.container_name | default(svc.name) }}
    restart: {{ svc.restart | default('unless-stopped') }}
{% if svc.runtime is defined %}
    runtime: {{ svc.runtime }}
{% endif %}
{% if svc.hostname is defined %}
    hostname: {{ svc.hostname }}
{% endif %}
{% if svc.domainname is defined %}
    domainname: {{ svc.domainname }}
{% endif %}
{% if svc_user is not none %}
    user: {{ svc_user }}
{% endif %}
{% if svc_read_only is not none %}
    read_only: {{ svc_read_only | ternary('true', 'false') }}
{% endif %}
{% if svc_cap_drop %}
    cap_drop:
{% for cap in svc_cap_drop %}
      - {{ cap }}
{% endfor %}
{% endif %}
{% if svc_security_opt.items %}
    security_opt:
{% for opt in svc_security_opt.items %}
      - {{ opt }}
{% endfor %}
{% endif %}
{% if svc_tmpfs.items %}
    tmpfs:
{% for entry in svc_tmpfs.items %}
      - "{{ entry }}"
{% endfor %}
{% endif %}
{% if svc.working_dir is defined %}
    working_dir: {{ svc.working_dir }}
{% endif %}
  {% set svc_secret_env = svc.secret_env | default(secret_env) %}
  {% set env_ns = namespace(files=[]) %}
  {% if svc.env_file is defined %}
  {% if svc.env_file is string %}
    {% set _ = env_ns.files.append(svc.env_file) %}
  {% elif svc.env_file is iterable %}
    {% for ef in svc.env_file %}
      {% set _ = env_ns.files.append(ef) %}
    {% endfor %}
  {% endif %}
  {% endif %}
{% if env_ns.files %}
    env_file:
{% for ef in env_ns.files %}
      - "{{ ef }}"
{% endfor %}
{% endif %}
{% set inline_env = svc.env | default([]) %}
{% set environment_ns = namespace(items=[], names=[]) %}
{% for item in inline_env %}
  {% if item.name not in environment_ns.names %}
    {% set _ = environment_ns.items.append({'name': item.name, 'value': item.value}) %}
    {% set _ = environment_ns.names.append(item.name) %}
  {% endif %}
{% endfor %}
{% if secrets is defined and secrets.rotation_timestamp is defined and secrets.rotation_timestamp is not none %}
  {% if 'SHMA_SECRETS_ROTATION' not in environment_ns.names %}
    {% set _ = environment_ns.items.append({'name': 'SHMA_SECRETS_ROTATION', 'value': secrets.rotation_timestamp}) %}
    {% set _ = environment_ns.names.append('SHMA_SECRETS_ROTATION') %}
  {% endif %}
{% endif %}
{% for secret_item in svc_secret_env %}
  {% if secret_item.name not in environment_ns.names %}
    {% set _ = environment_ns.items.append({'name': secret_item.name, 'value': '${' ~ secret_item.name ~ '}'}) %}
    {% set _ = environment_ns.names.append(secret_item.name) %}
  {% endif %}
{% endfor %}
{% if environment_ns.items %}
    environment:
{% for env_item in environment_ns.items %}
      {{ env_item.name }}: {{ env_item.value }}
{% endfor %}
{% endif %}
{% if svc.entrypoint is defined %}
    entrypoint: {{ svc.entrypoint if svc.entrypoint is string else svc.entrypoint | to_json }}
{% endif %}
{% if svc.command is defined %}
    command: {{ svc.command if svc.command is string else svc.command | to_json }}
{% endif %}
{% set volumes = svc.volumes | default([]) %}
{% if volumes %}
    volumes:
{% for vol in volumes %}
      - {% if vol.host_path is defined %}{{ vol.host_path }}{% else %}{{ vol.source | default(vol.name) }}{% endif %}:{{ vol.target }}{% if vol.mode is defined %}:{{ vol.mode }}{% endif %}
{% endfor %}
{% endif %}
{% set ports = svc.ports | default([]) %}
{% if ports %}
    ports:
{% for port in ports %}
      - "{{ port.host_ip | default('') }}{% if port.host_ip is defined and port.host_ip | string | length > 0 %}:{% endif %}{{ port.published | default(port.target) }}:{{ port.target }}{% if port.protocol is defined %}/{{ port.protocol }}{% endif %}"
{% endfor %}
{% endif %}
{% set networks = svc.networks | default(['app-network']) %}
{% if networks %}
    networks:
{% for net in networks %}
      - {{ net }}
{% endfor %}
{% endif %}
{% if svc.extra_hosts is defined and svc.extra_hosts | length > 0 %}
    extra_hosts:
{% for host in svc.extra_hosts %}
      - {{ host }}
{% endfor %}
{% endif %}
{% if svc.labels is defined and svc.labels | length > 0 %}
    labels:
{% if svc.labels is mapping %}
{% for key, value in svc.labels.items() %}
      {{ key }}: {{ value }}
{% endfor %}
{% else %}
{% for label in svc.labels %}
      - "{{ label }}"
{% endfor %}
{% endif %}
{% endif %}
{% if svc.depends_on is defined and svc.depends_on %}
    depends_on:
{% if svc.depends_on is mapping %}
{{ svc.depends_on | to_nice_yaml(indent=6) | indent(6) }}
{% else %}
{% for dep in svc.depends_on %}
      - {{ dep }}
{% endfor %}
{% endif %}
{% endif %}
{% if svc.deploy is defined %}
    deploy:
{{ svc.deploy | to_nice_yaml(indent=6) | indent(6) }}
{% endif %}
{% set svc_health = svc.health if svc.health is defined else (health if loop.first and health is defined else None) %}
{% if svc_health is not none %}
    healthcheck:
      test: {{ svc_health.cmd | default(['true']) | to_json }}
      interval: {{ svc_health.interval | default('10s') }}
      timeout: {{ svc_health.timeout | default('5s') }}
      retries: {{ svc_health.retries | default(3) }}
{% if svc_health.start_period is defined %}
      start_period: {{ svc_health.start_period }}
{% endif %}
{% endif %}
{% set svc_file_secrets = svc.file_secrets | default(file_secrets) %}
{% if svc_file_secrets %}
    secrets:
{% for secret in svc_file_secrets %}
      - source: {{ secret.name }}
        target: {{ secret.target | default(secret.name) }}
        mode: {{ secret.mode | default('0400') }}
{% endfor %}
{% endif %}
{% endfor %}

{% set ns = namespace(volumes=[]) %}
{% for svc in services_list %}
  {% for vol in svc.volumes | default([]) %}
    {% if vol.host_path is not defined %}
      {% set volume_name = vol.source | default(vol.name) %}
      {% set driver = vol.driver | default('local') %}
      {% if ns.volumes | selectattr('name', 'equalto', volume_name) | list | length == 0 %}
        {% set _ = ns.volumes.append({'name': volume_name, 'driver': driver}) %}
      {% endif %}
    {% endif %}
  {% endfor %}
{% endfor %}
{% if ns.volumes %}
volumes:
{% for volume_name in ns.volumes %}
  {{ volume_name }}:
    driver: {{ volume_driver | default('local') }}
{% endfor %}
{% endif %}

{% if file_secrets %}
secrets:
{% for secret in file_secrets %}
  {{ secret.name }}:
    file: "./secrets/{{ secret.name }}"
{% endfor %}
{% endif %}

{% set network_ns = namespace(items=[]) %}
{% for svc in services_list %}
  {% for net in svc.networks | default(['app-network']) %}
    {% if net not in network_ns.items %}
      {% set _ = network_ns.items.append(net) %}
    {% endif %}
  {% endfor %}
{% endfor %}
{% if network_ns.items %}
networks:
{% for net in network_ns.items %}
  {{ net }}:
    driver: bridge
{% endfor %}
{% endif %}
