{% from '_common.j2' import service_context %}
{% set _ctx = namespace(security=None, secrets=None, mounts=None) %}
{% call(security_defaults, secret_context, mount_context) service_context(service_security, secrets, mounts) %}
  {% set _ctx.security = security_defaults %}
  {% set _ctx.secrets = secret_context %}
  {% set _ctx.mounts = mount_context %}
{% endcall %}
{%- set shma_security_defaults = _ctx.security %}
{%- set shma_secret_context = _ctx.secrets %}
{%- set shma_secret_catalog = shma_secret_context.catalog %}
{%- set docker_ephemeral_mounts = _ctx.mounts.ephemeral | select_ephemeral_mounts('docker') %}
{%- set default_run_user = shma_security_defaults.run_user %}
{%- set default_run_group = shma_security_defaults.run_group %}
{%- set compose_user_default = shma_security_defaults.compose_user if shma_security_defaults.compose_user is not none else ((default_run_user | string) ~ ':' ~ (default_run_group | string)) %}
{%- set read_only_root = shma_security_defaults.read_only_root %}
{%- set drop_caps_default = shma_security_defaults.capabilities_drop %}
{%- set no_new_privs = shma_security_defaults.no_new_privileges %}
{%- set default_apparmor = shma_security_defaults.apparmor_profile %}
{%- set allowed_apparmor_profiles = shma_security_defaults.allowed_apparmor_profiles %}
{%- set defined_secret_env_names = shma_secret_catalog.env_names | default([]) %}
{%- set defined_file_secret_names = shma_secret_catalog.file_names | default([]) %}
{%- set docker_tmpfs = namespace(items=[]) %}
{%- for mount in docker_ephemeral_mounts %}
  {%- set options = [] %}
  {%- if mount.size is not none %}{%- set _ = options.append('size=' ~ mount.size) %}{%- endif %}
  {%- if mount.mode is not none %}{%- set _ = options.append('mode=' ~ mount.mode) %}{%- endif %}
  {%- set entry = mount.path %}
  {%- if options %}{%- set entry = entry ~ ':' ~ options | join(',') %}{%- endif %}
  {%- if entry not in docker_tmpfs.items %}{%- set _ = docker_tmpfs.items.append(entry) %}{%- endif %}
{%- endfor %}
{% set services_list = services | default([{ 
  'name': service_name | default(service_id),
  'container_name': service_name | default(service_id),
  'image': service_image,
  'env': service_env | default([]),
  'ports': service_ports | default([]),
  'volumes': service_volumes | default([]),
  'networks': service_networks | default(['app-network'])
}]) %}
{% set resources = service_resources | default({}) %}
{% set connections_per_second = resources.connections_per_second if resources.connections_per_second is defined else None %}
{% set primary_service_name = service_name | default(service_id) %}
{% set secret_env = shma_secret_context.env %}
{% set file_secrets = shma_secret_context.files %}
{% set rotation_timestamp = shma_secret_context.rotation_timestamp %}
{% set docker_defaults = {
  'compose_user_default': compose_user_default,
  'read_only_root': read_only_root,
  'cap_drop_default': drop_caps_default,
  'no_new_privs': no_new_privs,
  'default_apparmor': default_apparmor,
  'allowed_apparmor_profiles': allowed_apparmor_profiles,
  'docker_tmpfs': docker_tmpfs.items,
  'secret_env': secret_env,
  'file_secrets': file_secrets,
  'connections_per_second': connections_per_second,
  'primary_service_name': primary_service_name,
  'rotation_timestamp': rotation_timestamp,
  'default_init': shma_security_defaults.init,
} %}
{% set prepared_services = services_list | docker_compose_prepare_services(docker_defaults) %}
services:
{% for svc in prepared_services %}
  {{ svc.name }}:
    image: {{ svc.image }}
    container_name: {{ svc.container_name | default(svc.name) }}
    restart: {{ svc.restart | default('unless-stopped') }}
{% if svc.runtime is defined %}
    runtime: {{ svc.runtime }}
{% endif %}
{% if svc.hostname is defined %}
    hostname: {{ svc.hostname }}
{% endif %}
{% if svc.domainname is defined %}
    domainname: {{ svc.domainname }}
{% endif %}
{% if svc.render_user is not none %}
    user: {{ svc.render_user }}
{% endif %}
{% if svc.render_init is not none %}
    init: {{ svc.render_init | to_json }}
{% endif %}
{% if svc.render_read_only is not none %}
    read_only: {{ svc.render_read_only | to_json }}
{% endif %}
{% if svc.render_cap_drop %}
    cap_drop:
{% for cap in svc.render_cap_drop %}
      - {{ cap }}
{% endfor %}
{% endif %}
{% if svc.render_security_opt %}
    security_opt:
{% for opt in svc.render_security_opt %}
      - {{ opt }}
{% endfor %}
{% endif %}
{% if svc.render_tmpfs %}
    tmpfs:
{% for entry in svc.render_tmpfs %}
      - "{{ entry }}"
{% endfor %}
{% endif %}
{% if svc.working_dir is defined %}
    working_dir: {{ svc.working_dir }}
{% endif %}
{% if svc.render_env_files %}
    env_file:
{% for ef in svc.render_env_files %}
      - "{{ ef }}"
{% endfor %}
{% endif %}
{% if svc.render_environment %}
    environment:
{% for env_item in svc.render_environment %}
      {{ env_item.name }}: {{ env_item.value }}
{% endfor %}
{% endif %}
  {% if svc.entrypoint is defined %}
    entrypoint: {{ svc.entrypoint if svc.entrypoint is string else svc.entrypoint | to_json }}
{% endif %}
{% if svc.command is defined %}
    command: {{ svc.command if svc.command is string else svc.command | to_json }}
{% endif %}
{% set volumes = svc.volumes | default([]) %}
{% if volumes %}
    volumes:
{% for vol in volumes %}
      - {% if vol.host_path is defined %}{{ vol.host_path }}{% else %}{{ vol.source | default(vol.name) }}{% endif %}:{{ vol.target }}{% if vol.mode is defined %}:{{ vol.mode }}{% endif %}
{% endfor %}
{% endif %}
{% set ports = svc.ports | default([]) %}
{% if ports %}
{% if service_ports is defined and service_ports is not none and service_ports | length > 0 %}
    x-shma-service-ports: true
{% endif %}
    ports:
{% for port in ports %}
      - "{{ port.host_ip | default('') }}{% if port.host_ip is defined and port.host_ip | string | length > 0 %}:{% endif %}{{ port.published | default(port.target) }}:{{ port.target }}{% if port.protocol is defined %}/{{ port.protocol }}{% endif %}"
{% endfor %}
{% endif %}
{% set networks = svc.networks | default(['app-network']) %}
{% if networks %}
    networks:
{% for net in networks %}
      - {{ net }}
{% endfor %}
{% endif %}
{% if svc.extra_hosts is defined and svc.extra_hosts | length > 0 %}
    extra_hosts:
{% for host in svc.extra_hosts %}
      - {{ host }}
{% endfor %}
{% endif %}
{% if svc.labels is defined and svc.labels | length > 0 %}
    labels:
{% if svc.labels is mapping %}
{% for key, value in svc.labels.items() %}
      {{ key }}: {{ value }}
{% endfor %}
{% else %}
{% for label in svc.labels %}
      - "{{ label }}"
{% endfor %}
{% endif %}
{% endif %}
{% if svc.depends_on is defined and svc.depends_on %}
    depends_on:
{% if svc.depends_on is mapping %}
{{ svc.depends_on | to_nice_yaml(indent=6) | indent(6) }}
{% else %}
{% for dep in svc.depends_on %}
      - {{ dep }}
{% endfor %}
{% endif %}
{% endif %}
{% if svc.deploy is defined %}
    deploy:
{{ svc.deploy | to_nice_yaml(indent=6) | indent(6) }}
{% endif %}
{% set svc_health = svc.health if svc.health is defined else (health if loop.first and health is defined else None) %}
{% if svc_health is not none %}
    healthcheck:
      test: {{ svc_health | health_command | to_json }}
      interval: {{ svc_health.interval | default('10s') }}
      timeout: {{ svc_health.timeout | default('5s') }}
      retries: {{ svc_health.retries | default(3) }}
{% if svc_health.start_period is defined %}
      start_period: {{ svc_health.start_period }}
{% endif %}
{% endif %}
{% if svc.render_file_secrets %}
    secrets:
{% for secret in svc.render_file_secrets %}
      - source: {{ secret.name }}
        target: {{ secret.target | default(secret.name) }}
        mode: {{ secret.mode | default('0400') }}
{% endfor %}
{% endif %}
{% endfor %}

{% set ns = namespace(volumes=[]) %}
{% for svc in prepared_services %}
  {% for vol in svc.volumes | default([]) %}
    {% if vol.host_path is not defined %}
      {% set volume_name = vol.source | default(vol.name) %}
      {% set driver = vol.driver | default('local') %}
      {% if ns.volumes | selectattr('name', 'equalto', volume_name) | list | length == 0 %}
        {% set _ = ns.volumes.append({'name': volume_name, 'driver': driver}) %}
      {% endif %}
    {% endif %}
  {% endfor %}
{% endfor %}
{% if ns.volumes %}
volumes:
{% for volume in ns.volumes %}
  {{ volume.name }}:
    driver: {{ volume.driver | default('local') }}
{% endfor %}
{% endif %}

{% if file_secrets %}
secrets:
{% for secret in file_secrets %}
  {{ secret.name }}:
    file: "./secrets/{{ secret.name }}"
{% endfor %}
{% endif %}

{% set network_ns = namespace(items=[]) %}
{% for svc in prepared_services %}
  {% for net in svc.networks | default(['app-network']) %}
    {% if net not in network_ns.items %}
      {% set _ = network_ns.items.append(net) %}
    {% endif %}
  {% endfor %}
{% endfor %}
{% if network_ns.items %}
networks:
{% for net in network_ns.items %}
  {{ net }}:
    driver: bridge
{% endfor %}
{% endif %}
