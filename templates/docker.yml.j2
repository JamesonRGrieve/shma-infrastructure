{%- set mounts_config = mounts | default({}) %}
{%- set ephemeral_mounts = mounts_config.ephemeral_mounts | default([]) %}
{%- set security_defaults = (service_security if service_security is defined else None) | normalize_security %}
{%- set default_run_user = security_defaults.run_as_user %}
{%- set default_run_group = security_defaults.run_as_group %}
{%- set compose_user_default = security_defaults.compose_user %}
{%- set read_only_root = security_defaults.read_only_root_filesystem %}
{%- set drop_caps_default = security_defaults.capabilities_drop %}
{%- set no_new_privs = security_defaults.no_new_privileges %}
{%- set default_apparmor = security_defaults.apparmor_profile %}
{%- set docker_tmpfs = namespace(items=[]) %}
{%- for mount in ephemeral_mounts | select_mounts('docker') %}
    {%- set options = [] %}
    {%- if mount.size is defined %}{%- set _ = options.append('size=' ~ mount.size) %}{%- endif %}
    {%- if mount.mode is defined %}{%- set _ = options.append('mode=' ~ mount.mode) %}{%- endif %}
    {%- set entry = mount.path %}
    {%- if options %}{%- set entry = entry ~ ':' ~ options | join(',') %}{%- endif %}
    {%- if entry not in docker_tmpfs.items %}{%- set _ = docker_tmpfs.items.append(entry) %}{%- endif %}
  {%- endif %}
{%- endfor %}
{% set services_list = services | default([{
  'name': service_name | default(service_id),
  'container_name': service_name | default(service_id),
  'image': service_image,
  'env': service_env | default([]),
  'ports': service_ports | default([]),
  'volumes': service_volumes | default([]),
  'networks': service_networks | default(['app-network'])
}]) %}
{% set resources = service_resources | default({}) %}
{% set connections_per_second = resources.connections_per_second if resources.connections_per_second is defined else None %}
{% set primary_service_name = service_name | default(service_id) %}
{% set secrets_info = (secrets if secrets is defined else None) | normalize_secrets(primary_service_name) %}
{% set secret_env = secrets_info.env %}
{% set file_secrets = secrets_info.files %}
{% set secrets_rotation = secrets_info.rotation_timestamp %}
services:
{% for svc in services_list %}
  {%- set svc_user = svc.user if svc.user is defined else compose_user_default %}
  {%- set svc_read_only = svc.read_only if svc.read_only is defined else read_only_root %}
  {%- set svc_cap_drop = svc.cap_drop if svc.cap_drop is defined else drop_caps_default %}
  {%- if svc_cap_drop is string %}{%- set svc_cap_drop = [svc_cap_drop] %}{%- endif %}
  {%- set svc_security_opt = namespace(items=[]) %}
  {%- if svc.security_opt is defined and svc.security_opt %}
    {%- for opt in svc.security_opt %}
      {%- set _ = svc_security_opt.items.append(opt) %}
    {%- endfor %}
  {%- endif %}
  {%- if no_new_privs %}
    {%- if 'no-new-privileges:true' not in svc_security_opt.items %}
      {%- set _ = svc_security_opt.items.append('no-new-privileges:true') %}
    {%- endif %}
  {%- endif %}
  {%- set has_apparmor = false %}
  {%- for opt in svc_security_opt.items %}
    {%- if opt is string and opt.startswith('apparmor=') %}
      {%- set has_apparmor = true %}
    {%- endif %}
  {%- endfor %}
  {%- set svc_apparmor = svc.apparmor_profile if svc.apparmor_profile is defined else default_apparmor %}
  {%- if svc_apparmor is not none and (svc_apparmor | string) | length > 0 %}
    {%- set apparmor_opt = 'apparmor=' ~ svc_apparmor %}
    {%- if not has_apparmor and apparmor_opt not in svc_security_opt.items %}
      {%- set _ = svc_security_opt.items.append(apparmor_opt) %}
    {%- endif %}
  {%- endif %}
  {%- set svc_tmpfs = namespace(items=[]) %}
  {%- if svc.tmpfs is defined and svc.tmpfs %}
    {%- for item in svc.tmpfs %}
      {%- if item not in svc_tmpfs.items %}{%- set _ = svc_tmpfs.items.append(item) %}{%- endif %}
    {%- endfor %}
  {%- endif %}
  {%- for entry in docker_tmpfs.items %}
    {%- if entry not in svc_tmpfs.items %}{%- set _ = svc_tmpfs.items.append(entry) %}{%- endif %}
  {%- endfor %}
  {{ svc.name }}:
    image: {{ svc.image }}
    container_name: {{ svc.container_name | default(svc.name) }}
    restart: {{ svc.restart | default('unless-stopped') }}
{% if svc.runtime is defined %}
    runtime: {{ svc.runtime }}
{% endif %}
{% if svc.hostname is defined %}
    hostname: {{ svc.hostname }}
{% endif %}
{% if svc.domainname is defined %}
    domainname: {{ svc.domainname }}
{% endif %}
{% if svc_user is not none %}
    user: {{ svc_user }}
{% endif %}
{% if svc_read_only is not none %}
    read_only: {{ svc_read_only | ternary('true', 'false') }}
{% endif %}
{% if svc_cap_drop %}
    cap_drop:
{% for cap in svc_cap_drop %}
      - {{ cap }}
{% endfor %}
{% endif %}
{% if svc_security_opt.items %}
    security_opt:
{% for opt in svc_security_opt.items %}
      - {{ opt }}
{% endfor %}
{% endif %}
{% if svc_tmpfs.items %}
    tmpfs:
{% for entry in svc_tmpfs.items %}
      - "{{ entry }}"
{% endfor %}
{% endif %}
{% if svc.working_dir is defined %}
    working_dir: {{ svc.working_dir }}
{% endif %}
  {% set svc_secret_env = svc.secret_env | default(secret_env) %}
  {% set env_ns = namespace(files=[]) %}
  {% if svc.env_file is defined %}
  {% if svc.env_file is string %}
    {% set _ = env_ns.files.append(svc.env_file) %}
  {% elif svc.env_file is iterable %}
    {% for ef in svc.env_file %}
      {% set _ = env_ns.files.append(ef) %}
    {% endfor %}
  {% endif %}
  {% endif %}
{% if env_ns.files %}
    env_file:
{% for ef in env_ns.files %}
      - "{{ ef }}"
{% endfor %}
{% endif %}
{% set inline_env = svc.env | default([]) %}
{% set env_extras = [] %}
{% if connections_per_second and svc.name == primary_service_name %}
  {% set _ = env_extras.append({'name': 'CONNECTIONS_PER_SECOND', 'value': connections_per_second | string}) %}
{% endif %}
{% if secrets_rotation is not none %}
  {% set _ = env_extras.append({'name': 'SHMA_SECRETS_ROTATION', 'value': secrets_rotation}) %}
{% endif %}
{% set env_data = inline_env | merge_environment(env_extras) %}
{% set env_items = env_data.items %}
{% set env_names = env_data.names %}
{% for secret_item in svc_secret_env %}
  {% if secret_item.name not in env_names %}
    {% set _ = env_items.append({'name': secret_item.name, 'value': '${' ~ secret_item.name ~ '}'}) %}
    {% set _ = env_names.append(secret_item.name) %}
  {% endif %}
{% endfor %}
{% if env_items %}
    environment:
{% for env_item in env_items %}
      {{ env_item.name }}: {{ env_item.value }}
{% endfor %}
{% endif %}
  {% if svc.entrypoint is defined %}
    entrypoint: {{ svc.entrypoint if svc.entrypoint is string else svc.entrypoint | to_json }}
{% endif %}
{% if svc.command is defined %}
    command: {{ svc.command if svc.command is string else svc.command | to_json }}
{% endif %}
{% set volumes = svc.volumes | default([]) %}
{% if volumes %}
    volumes:
{% for vol in volumes %}
      - {% if vol.host_path is defined %}{{ vol.host_path }}{% else %}{{ vol.source | default(vol.name) }}{% endif %}:{{ vol.target }}{% if vol.mode is defined %}:{{ vol.mode }}{% endif %}
{% endfor %}
{% endif %}
{% set ports = svc.ports | default([]) %}
{% if ports %}
{% if service_ports is defined and service_ports is not none and service_ports | length > 0 %}
    x-shma-service-ports: true
{% endif %}
    ports:
{% for port in ports %}
      - "{{ port.host_ip | default('') }}{% if port.host_ip is defined and port.host_ip | string | length > 0 %}:{% endif %}{{ port.published | default(port.target) }}:{{ port.target }}{% if port.protocol is defined %}/{{ port.protocol }}{% endif %}"
{% endfor %}
{% endif %}
{% set networks = svc.networks | default(['app-network']) %}
{% if networks %}
    networks:
{% for net in networks %}
      - {{ net }}
{% endfor %}
{% endif %}
{% if svc.extra_hosts is defined and svc.extra_hosts | length > 0 %}
    extra_hosts:
{% for host in svc.extra_hosts %}
      - {{ host }}
{% endfor %}
{% endif %}
{% if svc.labels is defined and svc.labels | length > 0 %}
    labels:
{% if svc.labels is mapping %}
{% for key, value in svc.labels.items() %}
      {{ key }}: {{ value }}
{% endfor %}
{% else %}
{% for label in svc.labels %}
      - "{{ label }}"
{% endfor %}
{% endif %}
{% endif %}
{% if svc.depends_on is defined and svc.depends_on %}
    depends_on:
{% if svc.depends_on is mapping %}
{{ svc.depends_on | to_nice_yaml(indent=6) | indent(6) }}
{% else %}
{% for dep in svc.depends_on %}
      - {{ dep }}
{% endfor %}
{% endif %}
{% endif %}
{% if svc.deploy is defined %}
    deploy:
{{ svc.deploy | to_nice_yaml(indent=6) | indent(6) }}
{% endif %}
{% set svc_health_source = svc.health if svc.health is defined else (health if loop.first and health is defined else None) %}
{% if svc_health_source is not none %}
  {% set svc_health = svc_health_source | normalize_health %}
    healthcheck:
      test: {{ svc_health.command | to_json }}
      interval: {{ svc_health.interval }}
      timeout: {{ svc_health.timeout }}
      retries: {{ svc_health.retries }}
{% if svc_health.start_period is not none %}
      start_period: {{ svc_health.start_period }}
{% endif %}
{% endif %}
{% set svc_file_secrets = svc.file_secrets | default(file_secrets) %}
{% if svc_file_secrets %}
    secrets:
{% for secret in svc_file_secrets %}
      - source: {{ secret.name }}
        target: {{ secret.target | default(secret.name) }}
        mode: {{ secret.mode | default('0400') }}
{% endfor %}
{% endif %}
{% endfor %}

{% set ns = namespace(volumes=[]) %}
{% for svc in services_list %}
  {% for vol in svc.volumes | default([]) %}
    {% if vol.host_path is not defined %}
      {% set volume_name = vol.source | default(vol.name) %}
      {% set driver = vol.driver | default('local') %}
      {% if ns.volumes | selectattr('name', 'equalto', volume_name) | list | length == 0 %}
        {% set _ = ns.volumes.append({'name': volume_name, 'driver': driver}) %}
      {% endif %}
    {% endif %}
  {% endfor %}
{% endfor %}
{% if ns.volumes %}
volumes:
{% for volume_name in ns.volumes %}
  {{ volume_name }}:
    driver: {{ volume_driver | default('local') }}
{% endfor %}
{% endif %}

{% if file_secrets %}
secrets:
{% for secret in file_secrets %}
  {{ secret.name }}:
    file: "./secrets/{{ secret.name }}"
{% endfor %}
{% endif %}

{% set network_ns = namespace(items=[]) %}
{% for svc in services_list %}
  {% for net in svc.networks | default(['app-network']) %}
    {% if net not in network_ns.items %}
      {% set _ = network_ns.items.append(net) %}
    {% endif %}
  {% endfor %}
{% endfor %}
{% if network_ns.items %}
networks:
{% for net in network_ns.items %}
  {{ net }}:
    driver: bridge
{% endfor %}
{% endif %}
