---
{% from '_common.j2' import service_context %}
{% set _ctx = namespace(mounts=None) %}
{% call(_, _, mount_context) service_context(service_security, secrets, mounts) %}
  {% set _ctx.mounts = mount_context %}
{% endcall %}
{% set container = service_container | default({}) %}
{% set pkg_list = service_packages | default([]) %}
{% set file_list = service_files | default([]) %}
{% set svc_list = service_services | default([]) %}
{% set cmd_list = service_commands | default([]) %}
{% set proxmox_mounts = _ctx.mounts.ephemeral | select_ephemeral_mounts('proxmox') %}
{% set proxmox_tmpfs = namespace(items=[]) %}
{% for mount in proxmox_mounts %}
  {% set options = [] %}
  {% if mount.mode is not none %}{% set _ = options.append('mode=' ~ mount.mode) %}{% endif %}
  {% if mount.size is not none %}{% set _ = options.append('size=' ~ mount.size) %}{% endif %}
  {% set _ = proxmox_tmpfs.items.append({'path': mount.path, 'options': options}) %}
{% endfor %}
{% set pkg_names = namespace(items=[]) %}
{% for pkg in pkg_list %}
  {% if pkg is string %}
    {% set pkg_name = pkg %}
  {% elif pkg.name is defined %}
    {% set pkg_name = pkg.name %}
  {% else %}
    {% set pkg_name = '' %}
  {% endif %}
  {% if pkg_name %}
    {% set _ = pkg_names.items.append(pkg_name | lower) %}
  {% endif %}
{% endfor %}
{% set feature_ns = namespace(value=None) %}
{% if container.features is defined %}
  {% set normalized_features = [] %}
  {% set raw_features = [] %}
  {% if container.features is string %}
    {% set raw_features = (container.features | string) | split(',') %}
  {% elif container.features is sequence %}
    {% set raw_features = container.features %}
  {% elif container.features %}
    {% set raw_features = [container.features] %}
  {% endif %}
  {% for feature in raw_features %}
    {% set feature_str = (feature | string) | trim %}
    {% if feature_str %}
      {% set parts = feature_str | split('=') %}
      {% set name = parts[0] | trim %}
      {% set value_parts = parts[1:] %}
      {% set value = value_parts | join('=') | trim %}
      {% if value | length == 0 %}
        {% set normalized = name ~ '=1' %}
      {% else %}
        {% set normalized = name ~ '=' ~ value %}
      {% endif %}
      {% if normalized not in normalized_features %}
        {% set _ = normalized_features.append(normalized) %}
      {% endif %}
    {% endif %}
  {% endfor %}
  {% if normalized_features %}
    {% set feature_ns.value = normalized_features | join(',') %}
  {% else %}
    {% set feature_ns.value = '' %}
  {% endif %}
{% endif %}
{% set config_ns = namespace(items=[]) %}
{% for item in file_list %}
  {% set _ = config_ns.items.append(item) %}
{% endfor %}
{% set commands_ns = namespace(items=[]) %}
{% for command in cmd_list %}
  {% set _ = commands_ns.items.append(command) %}
{% endfor %}
{% set has_packages = pkg_list | length > 0 %}
{% set has_config = config_ns.items | length > 0 %}
{% set has_services = svc_list | length > 0 %}
{% set has_commands = commands_ns.items | length > 0 %}
{% set has_setup = has_packages or has_config or has_services or has_commands %}
{% if proxmox_tmpfs.items and (service_unit_name is defined or service_id is defined) %}
  {% set unit_name = service_unit_name | default(service_id) %}
  {% if unit_name %}
    {% set tmpfs_dir = '/etc/systemd/system/' ~ unit_name ~ '.service.d' %}
    {% set tmpfs_lines = [] %}
    {% for mount in proxmox_tmpfs.items %}
      {% set line = 'TemporaryFileSystem=' ~ mount.path %}
      {% if mount.options %}{% set line = line ~ ':' ~ mount.options | join(',') %}{% endif %}
      {% set _ = tmpfs_lines.append(line) %}
    {% endfor %}
    {% set tmpfs_content = '[Service]\n' ~ (tmpfs_lines | join('\n')) ~ '\n' %}
    {% set _ = config_ns.items.append({'path': tmpfs_dir ~ '/tmpfs.conf', 'content': tmpfs_content, 'mode': '0644', 'dir_mode': '0750'}) %}
  {% endif %}
{% endif %}
container_ip: "{{ service_ip }}"
container:
  vmid: "{{ container.vmid | default(service_id) }}"
  hostname: "{{ container.hostname | default(service_name | default(service_id)) }}"
  ostemplate: "{{ container.ostemplate | default(proxmox_template | default('local:vztmpl/ubuntu-24.04-standard_24.04-2_amd64.tar.zst')) }}"
  disk: "{{ container.disk | default(service_storage_gb | default(10)) }}"
  cores: "{{ container.cores | default(service_resources.cpu_cores | default(1)) }}"
  memory: "{{ container.memory | default(service_resources.memory_mb | default(512)) }}"
  swap: "{{ container.swap | default(service_resources.memory_mb | default(512)) }}"
  netif:
    net0: "name={{ container.interface | default('eth0') }},bridge={{ container.bridge | default('vmbr0') }},ip={{ service_ip }}/{{ container.cidr | default(24) }}{% if container.gateway is defined %},gw={{ container.gateway }}{% elif service_gateway is defined %},gw={{ service_gateway }}{% endif %}"
  onboot: {{ container.onboot | default('yes') }}
  unprivileged: {{ container.unprivileged | default('yes') }}


{% if feature_ns.value is not none %}
  features: "{{ feature_ns.value }}"
{% else %}
  features: "keyctl=0"
{% endif %}

{% if container.firewall is defined and container.firewall %}
  {% set firewall_config = container.firewall %}
  firewall:
    enabled: {{ firewall_config.enabled | default(true) | ternary(true, false) }}
    {% if firewall_config.default_inbound_policy is defined %}
    default_inbound_policy: "{{ firewall_config.default_inbound_policy }}"
    {% endif %}
    {% if firewall_config.default_outbound_policy is defined %}
    default_outbound_policy: "{{ firewall_config.default_outbound_policy }}"
    {% endif %}
    {% if firewall_config.default_forward_policy is defined %}
    default_forward_policy: "{{ firewall_config.default_forward_policy }}"
    {% endif %}
    {% if firewall_config.log_level is defined %}
    log_level: "{{ firewall_config.log_level }}"
    {% endif %}
    {% if firewall_config.rules is defined and firewall_config.rules %}
    rules:
    {% for rule in firewall_config.rules %}
      - {% if rule.action is defined %}action: "{{ rule.action }}"{% endif %}
        {% if rule.direction is defined %}direction: "{{ rule.direction }}"{% endif %}
        {% if rule.interface is defined %}interface: "{{ rule.interface }}"{% endif %}
        {% if rule.macro is defined %}macro: "{{ rule.macro }}"{% endif %}
        {% if rule.source is defined %}source: "{{ rule.source }}"{% endif %}
        {% if rule.destination is defined %}destination: "{{ rule.destination }}"{% endif %}
        {% if rule.protocol is defined %}protocol: "{{ rule.protocol }}"{% endif %}
        {% if rule.source_port is defined %}source_port: "{{ rule.source_port }}"{% endif %}
        {% if rule.destination_port is defined %}destination_port: "{{ rule.destination_port }}"{% endif %}
        {% if rule.icmp_type is defined %}icmp_type: "{{ rule.icmp_type }}"{% endif %}
        {% if rule.enable is defined %}enable: {{ rule.enable | ternary(true, false) }}{% endif %}
        {% if rule.log is defined %}log: {{ rule.log | ternary(true, false) }}{% endif %}
        {% if rule.comment is defined %}comment: "{{ rule.comment }}"{% endif %}
    {% endfor %}
    {% endif %}
{% endif %}

{% if has_setup %}
setup:
{% if has_packages %}
  packages:
{% for pkg in pkg_list %}
    - {{ pkg }}
{% endfor %}
{% endif %}
{% if has_config %}
  config:
{% for item in config_ns.items %}
    - path: {{ item.path }}
      content: |
{{ item.content | indent(8, true) }}{% if item.mode is defined %}
      mode: {{ item.mode }}{% endif %}{% if item.dir_mode is defined %}
      dir_mode: {{ item.dir_mode }}{% endif %}
{% endfor %}
{% endif %}
{% if has_services %}
  services:
{% for svc in svc_list %}
    - name: {{ svc.name }}
      enabled: {{ svc.enabled | default(true) | ternary(true, false) }}
      state: {{ svc.state | default('started') }}
{% endfor %}
{% endif %}
{% if has_commands %}
  commands:
{% for cmd in commands_ns.items %}
    - {{ cmd }}
{% endfor %}
{% endif %}
{% endif %}
