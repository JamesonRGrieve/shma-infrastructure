---
{% set container = service_container | default({}) %}
{% set pkg_list = service_packages | default([]) %}
{% set file_list = service_files | default([]) %}
{% set svc_list = service_services | default([]) %}
{% set cmd_list = service_commands | default([]) %}
{% set mounts_config = mounts | default({}) %}
{% set ephemeral_mounts = mounts_config.ephemeral_mounts | default([]) %}
{% set default_apply_targets = ['docker', 'podman', 'kubernetes', 'proxmox', 'baremetal'] %}
{% set proxmox_tmpfs = namespace(items=[]) %}
{% for mount in ephemeral_mounts %}
  {% set apply_targets = mount.apply_to | default(default_apply_targets) %}
  {% if 'proxmox' in apply_targets %}
    {% set options = [] %}
    {% if mount.mode is defined %}{% set _ = options.append('mode=' ~ mount.mode) %}{% endif %}
    {% if mount.size is defined %}{% set _ = options.append('size=' ~ mount.size) %}{% endif %}
    {% set _ = proxmox_tmpfs.items.append({'path': mount.path, 'options': options}) %}
  {% endif %}
{% endfor %}
{% set pkg_names = namespace(items=[]) %}
{% for pkg in pkg_list %}
  {% if pkg is string %}
    {% set pkg_name = pkg %}
  {% elif pkg.name is defined %}
    {% set pkg_name = pkg.name %}
  {% else %}
    {% set pkg_name = '' %}
  {% endif %}
  {% if pkg_name %}
    {% set _ = pkg_names.items.append(pkg_name | lower) %}
  {% endif %}
{% endfor %}
{% set allowed_lxc_features = ['nesting', 'keyctl', 'fuse', 'mount'] %}
{% set feature_ns = namespace(value=None) %}
{% if container.features is defined %}
  {% set raw_features = [] %}
  {% if container.features is string %}
    {% set raw_features = (container.features | string) | split(',') %}
  {% elif container.features is sequence %}
    {% set raw_features = container.features %}
  {% elif container.features %}
    {% set raw_features = [container.features] %}
  {% endif %}
  {% set validated = namespace(items=[]) %}
  {% set invalid = namespace(items=[]) %}
  {% for feature in raw_features %}
    {% set feature_str = feature | string %}
    {% set trimmed = feature_str | trim %}
    {% if trimmed %}
      {% set parts = trimmed | split('=') %}
      {% set name = parts[0] | trim %}
      {% if name in allowed_lxc_features %}
        {% set value_parts = parts[1:] %}
        {% set value = value_parts | join('=') %}
        {% if value | length > 0 %}
          {% set normalized = name ~ '=' ~ value | trim %}
        {% else %}
          {% set normalized = name ~ '=1' %}
        {% endif %}
        {% if normalized not in validated.items %}
          {% set _ = validated.items.append(normalized) %}
        {% endif %}
      {% else %}
        {% if name %}
          {% set _ = invalid.items.append(name) %}
        {% else %}
          {% set _ = invalid.items.append(trimmed) %}
        {% endif %}
      {% endif %}
    {% endif %}
  {% endfor %}
  {% if invalid.items %}
    {% set invalid_message = 'Unknown Proxmox LXC feature(s): ' ~ (invalid.items | unique | join(', ')) %}
    {{ lookup('pipe', 'python3 -c "import sys; sys.stderr.write(\"' ~ (invalid_message | replace('"', '\\"')) ~ '\n\"); sys.exit(1)"') }}
  {% endif %}
  {% if validated.items %}
    {% set feature_ns.value = validated.items | join(',') %}
  {% else %}
    {% set feature_ns.value = '' %}
  {% endif %}
{% endif %}
{% set config_ns = namespace(items=[]) %}
{% for item in file_list %}
  {% set _ = config_ns.items.append(item) %}
{% endfor %}
{% set commands_ns = namespace(items=[]) %}
{% for command in cmd_list %}
  {% set _ = commands_ns.items.append(command) %}
{% endfor %}
{% if proxmox_tmpfs.items and (service_unit_name is defined or service_id is defined) %}
  {% set unit_name = service_unit_name | default(service_id) %}
  {% if unit_name %}
    {% set tmpfs_dir = '/etc/systemd/system/' ~ unit_name ~ '.service.d' %}
    {% set tmpfs_lines = [] %}
    {% for mount in proxmox_tmpfs.items %}
      {% set line = 'TemporaryFileSystem=' ~ mount.path %}
      {% if mount.options %}{% set line = line ~ ':' ~ mount.options | join(',') %}{% endif %}
      {% set _ = tmpfs_lines.append(line) %}
    {% endfor %}
    {% set tmpfs_content = '[Service]\n' ~ (tmpfs_lines | join('\n')) ~ '\n' %}
    {% set _ = config_ns.items.append({'path': tmpfs_dir ~ '/tmpfs.conf', 'content': tmpfs_content, 'mode': '0644', 'dir_mode': '0750'}) %}
  {% endif %}
{% endif %}
container_ip: "{{ service_ip }}"
container:
  vmid: "{{ container.vmid | default(service_id) }}"
  hostname: "{{ container.hostname | default(service_name | default(service_id)) }}"
  ostemplate: "{{ container.ostemplate | default(proxmox_template | default('local:vztmpl/ubuntu-24.04-standard_24.04-2_amd64.tar.zst')) }}"
  disk: "{{ container.disk | default(service_storage_gb | default(10)) }}"
  cores: "{{ container.cores | default(service_resources.cpu_cores | default(1)) }}"
  memory: "{{ container.memory | default(service_resources.memory_mb | default(512)) }}"
  swap: "{{ container.swap | default(service_resources.memory_mb | default(512)) }}"
  netif:
    net0: "name={{ container.interface | default('eth0') }},bridge={{ container.bridge | default('vmbr0') }},ip={{ service_ip }}/{{ container.cidr | default(24) }}{% if container.gateway is defined %},gw={{ container.gateway }}{% elif service_gateway is defined %},gw={{ service_gateway }}{% endif %}"
  onboot: {{ container.onboot | default('yes') }}
  unprivileged: {{ container.unprivileged | default('yes') }}


{% if feature_ns.value is not none %}
  features: "{{ feature_ns.value }}"
{% else %}
  features: "keyctl=0"
{% endif %}

setup:
  packages:{% if pkg_list | length == 0 %} []{% else %}
{% for pkg in pkg_list %}
    - {{ pkg }}
{% endfor %}{% endif %}
  config:{% if config_ns.items | length == 0 %} []{% else %}
{% for item in config_ns.items %}
    - path: {{ item.path }}
      content: |
{{ item.content | indent(8, true) }}{% if item.mode is defined %}
      mode: {{ item.mode }}{% endif %}
{% endfor %}{% endif %}
  services:{% if svc_list | length == 0 %} []{% else %}
{% for svc in svc_list %}
    - name: {{ svc.name }}
      enabled: {{ svc.enabled | default(true) | ternary(true, false) }}
      state: {{ svc.state | default('started') }}
{% endfor %}{% endif %}
  commands:{% if commands_ns.items | length == 0 %} []{% else %}
{% for cmd in commands_ns.items %}
    - {{ cmd }}
{% endfor %}{% endif %}
