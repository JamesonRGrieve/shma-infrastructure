---
- name: Verify secret shredding cleanup
  hosts: localhost
  gather_facts: false
  connection: local
  vars:
    shred_tempdir: null
    secret_env_content:
      - name: API_TOKEN
        value: 8d1d12a2b8a4d5f6c7e8f9a0b1c2d3e4
    secret_file_entries:
      - name: tls-cert
        value: "-----BEGIN CERTIFICATE-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvUlCExampleCertificate\n-----END CERTIFICATE-----"
        target: /etc/service/certs/tls.crt
  tasks:
    - name: Create temporary directory for shredding test
      ansible.builtin.tempfile:
        state: directory
        prefix: secret-shred-
      register: shred_tempdir_result

    - name: Set shredding paths
      ansible.builtin.set_fact:
        shred_tempdir: "{{ shred_tempdir_result.path }}"
        secret_env_path: "{{ shred_tempdir_result.path }}/service.env"
        secret_dir: "{{ shred_tempdir_result.path }}/secrets"

    - name: Write environment secret file
      ansible.builtin.copy:
        dest: "{{ secret_env_path }}"
        mode: '0600'
        content: |-
          {% for item in secret_env_content %}
          {{ item.name }}={{ item.value }}
          {% endfor %}

    - name: Ensure secret directory exists
      ansible.builtin.file:
        path: "{{ secret_dir }}"
        state: directory
        mode: '0700'

    - name: Write file-based secrets
      ansible.builtin.copy:
        dest: "{{ secret_dir }}/{{ item.name }}"
        mode: '0400'
        content: "{{ item.value }}"
      loop: "{{ secret_file_entries }}"

    - name: Run shared secret cleanup tasks
      ansible.builtin.include_tasks: "{{ playbook_dir }}/../roles/common/apply_runtime/tasks/secret_cleanup.yml"
      vars:
        cleanup_secret_context:
          env_path: "{{ secret_env_path }}"
          env: "{{ secret_env_content }}"
          files: "{{ secret_file_entries }}"
          directory: "{{ secret_dir }}"
          shred: true

    - name: Assert environment secret file removed
      ansible.builtin.stat:
        path: "{{ secret_env_path }}"
      register: env_stat

    - name: Assert file secret removed
      ansible.builtin.stat:
        path: "{{ secret_dir }}/{{ secret_file_entries[0].name }}"
      register: file_stat

    - name: Assert secret directory removed
      ansible.builtin.stat:
        path: "{{ secret_dir }}"
      register: dir_stat

    - name: Validate shredding results
      ansible.builtin.assert:
        that:
          - not env_stat.stat.exists
          - not file_stat.stat.exists
          - not dir_stat.stat.exists
        fail_msg: "Secret artifacts were not properly shredded"

    - name: Remove temporary directory
      ansible.builtin.file:
        path: "{{ shred_tempdir }}"
        state: absent
      when: shred_tempdir is not none
