service_id: sample-service
service_name: sample-service
service_unit_name: sample-service
service_image: docker.io/library/nginx@sha256:2ed85f18cb2c6b49e191bcb6bf12c0c07d63f3937a05d9f5234170d4f8df5c94
service_ip: &service_ip 192.0.2.50
service_ports:
  - target: 8080
    published: 8080
    host_ip: *service_ip
secrets:
  shred_after_apply: true
  items:
    - name: provided-cert
      type: file
      content: "{{ vault_sample_ingress_tls_cert }}"
      target: /etc/ingress/tls/provided.crt
      mode: '0400'
    - name: provided-key
      type: file
      content: "{{ vault_sample_ingress_tls_key }}"
      target: /etc/ingress/tls/provided.key
      mode: '0400'
    - name: provided-ca
      type: file
      content: "{{ vault_sample_ingress_ca_cert }}"
      target: /etc/ingress/tls/provided-ca.crt
      mode: '0400'
ingress:
  enabled: true
  routes:
    - host: sample.example.test
      port: 8080
      path_prefix: "/"
      websocket: true
      sticky: cookie
      health:
        path: "/internal/health"
        interval: "10s"
        timeout: "3s"
      tls:
        mode: auto
        hsts: true
        alpn: ["h2", "http/1.1"]
        acme:
          challenge: dns
          dns_provider: cloudflare
          email: admin@example.test
          wildcard: false
      headers:
        set:
          - "X-Frame-Options: DENY"
          - "X-Content-Type-Options: nosniff"
        remove:
          - "Server"
      rate_limit:
        requests_per_minute: 900
        burst: 150
      basic_auth:
        secret: vault_ingress_auth
    - host: sample-provided.example.test
      port: 8080
      path_prefix: "/"
      tls:
        mode: provided
        certificate_secret: provided-cert
        key_secret: provided-key
        chain_secret: provided-ca
      mtls:
        ca_secret: provided-ca
        required: true
runtime_templates:
  proxmox: ../templates/proxmox.yml.j2
  docker: ../templates/docker.yml.j2
  podman: ../templates/podman.yml.j2
  kubernetes: ../templates/kubernetes.yml.j2
  baremetal: ../templates/baremetal.yml.j2
exports:
  env:
    - name: APP_FQDN
      value: sample.example.test
    - name: APP_PORT
      value: "8080"
    - name: APP_BACKEND_IP
      value: *service_ip
mounts:
  persistent_volumes: []
  ephemeral_mounts: []
health:
  cmd:
    - /usr/bin/env
    - bash
    - -c
    - "curl --fail --silent http://127.0.0.1:8080/internal/health"
