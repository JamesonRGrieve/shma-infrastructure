name: CI

on:
  push:
    branches: [main]
  pull_request:

permissions:
  contents: read

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-validate:
    name: "Lint and validate (${{ matrix.lane }} Â· ${{ matrix.service_file }})"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        lane: [stable, latest]
        service_file:
          - tests/sample_service.yml
          - tests/samples/full.yml
          - tests/samples/minimal.yml
          - tests/samples/with_secrets.yml
          - tests/samples/with_pvc.yml
    env:
      SERVICE_FILE: ${{ matrix.service_file }}
      PYTHONUNBUFFERED: "1"
    steps:
      - name: Prepare Python runtime
        id: setup
        uses: ./.github/actions/setup-python-env
        with:
          lane: ${{ matrix.lane }}

      - name: Prepare local bin directory
        run: |
          mkdir -p "$HOME/.local/bin"
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"

      - name: Cache CI tools
        id: tool-cache
        uses: actions/cache@13dac90522f915087a5de3c972d4d68512c964b0
        with:
          path: ~/.cache/ci-tools
          key: ${{ runner.os }}-ci-tools-${{ hashFiles('ci/version_matrix.yml') }}
          restore-keys: |
            ${{ runner.os }}-ci-tools-

      - name: Install verified tooling
        run: python ci/bootstrap_tools.py --cache-dir "$HOME/.cache/ci-tools" --bin-dir "$HOME/.local/bin"

      - name: Install kubectl
        run: |
          version="${{ steps.setup.outputs.kubectl-version }}"
          curl -fsSL https://dl.k8s.io/release/${version}/bin/linux/amd64/kubectl -o /tmp/kubectl
          curl -fsSL https://dl.k8s.io/${version}/bin/linux/amd64/kubectl.sha256 -o /tmp/kubectl.sha256
          echo "$(cat /tmp/kubectl.sha256)  /tmp/kubectl" | sha256sum -c -
          chmod +x /tmp/kubectl
          sudo mv /tmp/kubectl /usr/local/bin/kubectl

      - name: Verify compatibility matrix
        run: python ci/verify_versions.py

      - name: Run gitleaks
        id: gitleaks
        continue-on-error: true
        run: gitleaks detect --no-banner --redact --exit-code 1 --report-format sarif --report-path gitleaks.sarif --source .

      - name: Upload gitleaks SARIF
        if: always() && steps.gitleaks.outcome != 'skipped'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif

      - name: Enforce gitleaks policy
        if: steps.gitleaks.outcome == 'failure'
        run: exit 1

      - name: Run actionlint
        run: actionlint

      - name: Validate service schema and samples
        run: python ci/validate_schema.py --examples tests/samples

      - name: Run pre-commit checks
        run: pre-commit run --all-files

      - name: Determine service metadata
        id: metadata
        run: python ci/get_service_metadata.py "${{ matrix.service_file }}"

      - name: Run yamllint
        run: |
          yamllint roles/common schemas templates tests

      - name: Run ansible-lint
        run: ansible-lint roles/common tests/render.yml

      - name: Render Proxmox configuration
        run: ansible-playbook tests/render.yml -e runtime=proxmox -e service_definition_file=${{ matrix.service_file }}

      - name: Validate Proxmox manifest structure
        run: python ci/validate_proxmox_manifest.py --service-definition ${{ matrix.service_file }} ${{ steps.metadata.outputs.runtime_dir }}/proxmox.yml

      - name: Render Docker Compose configuration
        run: ansible-playbook tests/render.yml -e runtime=docker -e service_definition_file=${{ matrix.service_file }}

      - name: Validate Docker Compose manifest
        run: docker compose -f ${{ steps.metadata.outputs.runtime_dir }}/docker.yml config

      - name: Render Podman Quadlet configuration
        run: ansible-playbook tests/render.yml -e runtime=podman -e service_definition_file=${{ matrix.service_file }}

      - name: Validate Quadlet unit
        run: systemd-analyze verify ${{ steps.metadata.outputs.runtime_dir }}/podman.yml

      - name: Render bare-metal systemd configuration
        run: ansible-playbook tests/render.yml -e runtime=baremetal -e service_definition_file=${{ matrix.service_file }}

      - name: Validate systemd unit
        run: systemd-analyze verify ${{ steps.metadata.outputs.runtime_dir }}/baremetal.yml

      - name: Enforce systemd unit hardening
        run: |
          python ci/validate_systemd_unit.py \
            --service-definition "${{ matrix.service_file }}" \
            "${{ steps.metadata.outputs.runtime_dir }}/baremetal.yml"

      - name: Render Kubernetes manifests
        run: ansible-playbook tests/render.yml -e runtime=kubernetes -e service_definition_file=${{ matrix.service_file }}

      - name: Validate Kubernetes manifest (client)
        run: kubectl apply --dry-run=client --validate=true -f ${{ steps.metadata.outputs.runtime_dir }}/kubernetes.yml

      - name: Validate Kubernetes manifest (server)
        run: |
          kind create cluster --name ci-${{ steps.metadata.outputs.service_id }}
          kubectl apply --dry-run=server --validate=strict -f ${{ steps.metadata.outputs.runtime_dir }}/kubernetes.yml
          kubectl diff -f ${{ steps.metadata.outputs.runtime_dir }}/kubernetes.yml || true
          kind delete cluster --name ci-${{ steps.metadata.outputs.service_id }}

      - name: Assert secrets are not inlined in manifests
        run: |
          python ci/assert_no_inline_secrets.py ${{ matrix.service_file }} \
            ${{ steps.metadata.outputs.runtime_dir }}/docker.yml \
            ${{ steps.metadata.outputs.runtime_dir }}/podman.yml \
            ${{ steps.metadata.outputs.runtime_dir }}/kubernetes.yml

      - name: Run Conftest policies (service definitions)
        run: conftest test ${{ matrix.service_file }} policy

      - name: Verify secret shredding behavior
        run: ansible-playbook tests/verify_secret_shredding.yml

      - name: Run Conftest policies (rendered Kubernetes manifests)
        run: conftest test ${{ steps.metadata.outputs.runtime_dir }}/kubernetes.yml policy

      - name: Scan referenced container images
        run: |
          python ci/collect_container_images.py \
            "${{ matrix.service_file }}" \
            "${{ steps.metadata.outputs.runtime_dir }}" \
          | while read -r image; do
              trivy image --exit-code 1 --severity CRITICAL --quiet "$image" || exit 1
            done

      - name: Cosign policy check
        run: cosign version

  kubernetes-integration:
    name: "KinD integration (${{ matrix.service_file }})"
    runs-on: ubuntu-latest
    needs: lint-and-validate
    strategy:
      fail-fast: false
      matrix:
        service_file:
          - tests/sample_service.yml
          - tests/samples/minimal.yml
    env:
      SERVICE_FILE: ${{ matrix.service_file }}
    steps:
      - name: Prepare Python runtime
        id: setup
        uses: ./.github/actions/setup-python-env
        with:
          lane: stable

      - name: Prepare local bin directory
        run: |
          mkdir -p "$HOME/.local/bin"
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"

      - name: Cache CI tools
        id: integration-tool-cache
        uses: actions/cache@13dac90522f915087a5de3c972d4d68512c964b0
        with:
          path: ~/.cache/ci-tools
          key: ${{ runner.os }}-ci-tools-${{ hashFiles('ci/version_matrix.yml') }}
          restore-keys: |
            ${{ runner.os }}-ci-tools-

      - name: Install verified tooling
        run: python ci/bootstrap_tools.py --cache-dir "$HOME/.cache/ci-tools" --bin-dir "$HOME/.local/bin"

      - name: Install kubectl
        run: |
          version="${{ steps.setup.outputs.kubectl-version }}"
          curl -fsSL https://dl.k8s.io/release/${version}/bin/linux/amd64/kubectl -o /tmp/kubectl
          curl -fsSL https://dl.k8s.io/${version}/bin/linux/amd64/kubectl.sha256 -o /tmp/kubectl.sha256
          echo "$(cat /tmp/kubectl.sha256)  /tmp/kubectl" | sha256sum -c -
          chmod +x /tmp/kubectl
          sudo mv /tmp/kubectl /usr/local/bin/kubectl

      - name: Determine service metadata
        id: integration_metadata
        run: python ci/get_service_metadata.py "${{ matrix.service_file }}"

      - name: Render Kubernetes manifest
        run: ansible-playbook tests/render.yml -e runtime=kubernetes -e service_definition_file=${{ matrix.service_file }}

      - name: Create KinD cluster
        run: kind create cluster --name integration-${{ steps.integration_metadata.outputs.service_id }} --wait 120s

      - name: Apply manifests to KinD
        env:
          NAMESPACE: ${{ steps.integration_metadata.outputs.namespace }}
        run: |
          kubectl create namespace "$NAMESPACE" --dry-run=client -o yaml | kubectl apply -f -
          kubectl apply -f "${{ steps.integration_metadata.outputs.runtime_dir }}/kubernetes.yml"

      - name: Wait for deployment readiness
        env:
          NAMESPACE: ${{ steps.integration_metadata.outputs.namespace }}
          SERVICE_NAME: ${{ steps.integration_metadata.outputs.service_name }}
        run: |
          kubectl rollout status deployment/$SERVICE_NAME -n $NAMESPACE --timeout=180s
          kubectl wait --namespace $NAMESPACE --for=condition=Ready pod -l app=$SERVICE_NAME --timeout=180s

      - name: Verify health checks
        env:
          NAMESPACE: ${{ steps.integration_metadata.outputs.namespace }}
          SERVICE_NAME: ${{ steps.integration_metadata.outputs.service_name }}
        run: |
          python ci/run_kubernetes_health_checks.py "${{ matrix.service_file }}" "$NAMESPACE" "$SERVICE_NAME"

      - name: Collect diagnostics on failure
        if: failure()
        env:
          NAMESPACE: ${{ steps.integration_metadata.outputs.namespace }}
          SERVICE_NAME: ${{ steps.integration_metadata.outputs.service_name }}
        run: |
          kubectl get all -n $NAMESPACE -o wide || true
          kubectl get events -n $NAMESPACE --sort-by=.lastTimestamp || true
          kubectl describe deployment/$SERVICE_NAME -n $NAMESPACE || true
          kubectl describe pods -n $NAMESPACE || true
          kubectl logs -n $NAMESPACE -l app=$SERVICE_NAME --all-containers --tail=-1 || true

      - name: Tear down KinD cluster
        if: always()
        run: kind delete cluster --name integration-${{ steps.integration_metadata.outputs.service_id }} || true

  render-benchmark:
    name: "Render benchmarks (${{ matrix.service_file }})"
    runs-on: ubuntu-latest
    needs: lint-and-validate
    strategy:
      fail-fast: false
      matrix:
        service_file:
          - tests/sample_service.yml
          - tests/samples/full.yml
          - tests/samples/minimal.yml
          - tests/samples/with_secrets.yml
          - tests/samples/with_pvc.yml
    env:
      SERVICE_FILE: ${{ matrix.service_file }}
    steps:
      - name: Prepare Python runtime
        id: benchmark_setup
        uses: ./.github/actions/setup-python-env
        with:
          lane: stable

      - name: Prepare local bin directory
        run: |
          mkdir -p "$HOME/.local/bin"
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"

      - name: Cache CI tools
        id: benchmark-tool-cache
        uses: actions/cache@13dac90522f915087a5de3c972d4d68512c964b0
        with:
          path: ~/.cache/ci-tools
          key: ${{ runner.os }}-ci-tools-${{ hashFiles('ci/version_matrix.yml') }}
          restore-keys: |
            ${{ runner.os }}-ci-tools-

      - name: Install verified tooling
        run: python ci/bootstrap_tools.py --cache-dir "$HOME/.cache/ci-tools" --bin-dir "$HOME/.local/bin"

      - name: Benchmark runtime rendering
        run: python ci/benchmark_render.py --config ci/benchmark_config.yml "${{ matrix.service_file }}"
