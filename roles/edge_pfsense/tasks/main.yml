---
- name: Ensure pfSense API token is provided
  assert:
    that:
      - pfsense_api_token | length > 0
    fail_msg: "pfsense_api_token must be provided to configure HAProxy"

- name: Enforce scoped pfSense API token permissions
  ansible.builtin.assert:
    that:
      - "'root' not in (pfsense_api_token | lower)"
      - "'global' not in (pfsense_api_token | lower)"
    fail_msg: "pfsense_api_token must be scoped to the HAProxy API instead of root/global access"

- name: Build pfSense HAProxy payloads
  set_fact:
    pfsense_haproxy_payloads: >-
      {{ haproxy_payloads(
           edge_ingress_backends | default([]),
           pfsense_ingress_bind_addresses | default([]),
           provider='pfsense',
           certificate_ref=pfsense_tls_cert_ref
         )
      }}

- name: Extract pfSense backend and frontend payloads
  set_fact:
    pfsense_backends: "{{ pfsense_haproxy_payloads.backends }}"
    pfsense_frontends: "{{ pfsense_haproxy_payloads.frontends }}"

- name: Push HAProxy configuration to pfSense
  uri:
    url: "{{ pfsense_api_scheme }}://{{ pfsense_api_host }}:{{ pfsense_api_port }}/api/v1/services/haproxy/config"
    method: POST
    headers:
      Authorization: "{{ pfsense_api_token }}"
    validate_certs: "{{ pfsense_api_verify_ssl }}"
    body_format: json
    status_code: 200
    body: "{{ {'frontends': pfsense_frontends, 'backends': pfsense_backends} | to_json }}"
  register: pfsense_config_result
  no_log: true
  when: not (edge_ingress_skip_push | default(false) | bool)

- name: Apply HAProxy configuration on pfSense
  when: pfsense_apply_changes and not (edge_ingress_skip_push | default(false) | bool)
  uri:
    url: "{{ pfsense_api_scheme }}://{{ pfsense_api_host }}:{{ pfsense_api_port }}/api/v1/services/haproxy/apply"
    method: POST
    headers:
      Authorization: "{{ pfsense_api_token }}"
    validate_certs: "{{ pfsense_api_verify_ssl }}"
    status_code: 200
    body_format: json
    body: {}
  no_log: true
