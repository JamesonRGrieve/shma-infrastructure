---
- name: Disable swap immediately
  ansible.builtin.command: swapoff -a
  changed_when: false
  failed_when: false

- name: Comment swap entries in fstab
  ansible.builtin.replace:
    path: /etc/fstab
    regexp: '^([^#].*\sswap\s.*)$'
    replace: '# \1'
  register: swap_comment
  notify: Restart kubelet
  failed_when: false

- name: Ensure kernel modules are loaded
  ansible.builtin.copy:
    dest: /etc/modules-load.d/kubernetes.conf
    content: |
      overlay
      br_netfilter
    owner: root
    group: root
    mode: '0644'
  notify: Restart containerd

- name: Load overlay module
  ansible.builtin.modprobe:
    name: overlay
    state: present

- name: Load br_netfilter module
  ansible.builtin.modprobe:
    name: br_netfilter
    state: present

- name: Apply Kubernetes sysctl settings
  ansible.builtin.sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    sysctl_set: true
    reload: true
  loop: "{{ kubernetes_sysctl_settings }}"

- name: Ensure containerd configuration directory exists
  ansible.builtin.file:
    path: /etc/containerd
    state: directory
    mode: '0755'

- name: Check for existing containerd configuration
  ansible.builtin.stat:
    path: /etc/containerd/config.toml
  register: containerd_config
  when: ansible_facts.packages.get('containerd') is defined or 'containerd' in kubernetes_cni_packages

- name: Generate default containerd configuration
  ansible.builtin.command: containerd config default
  register: containerd_default_config
  changed_when: containerd_default_config.rc == 0
  when:
    - containerd_config is defined
    - not containerd_config.stat.exists

- name: Write containerd configuration to disk
  ansible.builtin.copy:
    dest: /etc/containerd/config.toml
    content: "{{ containerd_default_config.stdout }}\n"
    owner: root
    group: root
    mode: '0644'
  when: containerd_default_config is defined
  notify: Restart containerd

- name: Mark containerd configuration as present
  ansible.builtin.set_fact:
    containerd_config:
      stat:
        exists: true
  when: containerd_default_config is defined

- name: Ensure containerd uses systemd cgroups
  ansible.builtin.replace:
    path: /etc/containerd/config.toml
    regexp: 'SystemdCgroup = false'
    replace: 'SystemdCgroup = true'
  notify: Restart containerd
  when: containerd_config is defined and containerd_config.stat.exists

- name: Enable containerd service
  ansible.builtin.systemd:
    name: containerd
    state: started
    enabled: true
  when: ansible_service_mgr == 'systemd'

- name: Enable kubelet service
  ansible.builtin.systemd:
    name: kubelet
    enabled: true
    state: started
  when: ansible_service_mgr == 'systemd'
