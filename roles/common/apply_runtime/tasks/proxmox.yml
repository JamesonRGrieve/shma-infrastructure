---
- name: Load LXC configuration
  set_fact:
    lxc_config: "{{ lookup('file', runtime_config_path) | from_yaml }}"

- name: Ensure container_ip is defined
  assert:
    that:
      - lxc_config.container_ip is defined
      - lxc_config.container_ip | length > 0
    fail_msg: "Rendered Proxmox configuration must define container_ip"

  - name: Validate Proxmox API token configuration
    assert:
      that:
        - proxmox_api_token_id is defined
        - proxmox_api_token_id | length > 0
        - proxmox_api_token_secret is defined
        - proxmox_api_token_secret | length > 0
        - proxmox_api_host is defined
        - proxmox_api_host | length > 0
        - proxmox_node is defined
        - proxmox_node | length > 0
      fail_msg: "Proxmox API token credentials (id/secret) and target node must be defined"

  - name: Set Proxmox API connection parameters
    set_fact:
      proxmox_api_scheme: "{{ proxmox_api_use_https | default(true) | ternary('https', 'http') }}"
      proxmox_api_port: {{ proxmox_api_port | default(8006) }}
      proxmox_validate_certs: {{ proxmox_validate_certs | default(true) }}

  - name: Validate Proxmox API credentials
    ansible.builtin.uri:
      url: "{{ proxmox_api_scheme }}://{{ proxmox_api_host }}:{{ proxmox_api_port }}/api2/json/nodes"
      method: GET
      headers:
        Authorization: "PVEAPIToken={{ proxmox_api_token_id }}={{ proxmox_api_token_secret }}"
      validate_certs: {{ proxmox_validate_certs }}
      status_code: [200]
      timeout: {{ proxmox_api_timeout | default(30) }}
    register: proxmox_api_validation
    failed_when: proxmox_api_validation.status != 200
    no_log: "{{ proxmox_hide_sensitive | default(true) }}"

  - name: Set container IP facts
    set_fact:
      container_ip: "{{ lxc_config.container_ip }}"
      service_ip: "{{ lxc_config.container_ip }}"

  - name: Provision Proxmox container
    block:
      - name: Create LXC container
        community.general.proxmox:
          vmid: "{{ lxc_config.container.vmid }}"
          hostname: "{{ lxc_config.container.hostname }}"
          node: "{{ proxmox_node }}"
          api_token_id: "{{ proxmox_api_token_id }}"
          api_token_secret: "{{ proxmox_api_token_secret }}"
          api_host: "{{ proxmox_api_host }}"
          ostemplate: "{{ lxc_config.container.ostemplate }}"
          disk: "{{ lxc_config.container.disk }}"
          cores: "{{ lxc_config.container.cores }}"
          memory: "{{ lxc_config.container.memory }}"
          swap: "{{ lxc_config.container.swap }}"
          netif: "{{ lxc_config.container.netif }}"
          onboot: "{{ lxc_config.container.onboot }}"
          unprivileged: "{{ lxc_config.container.unprivileged }}"
          features: "{{ lxc_config.container.features | default(omit, true) }}"
          state: present
        no_log: "{{ proxmox_hide_sensitive | default(true) }}"

      - name: Start container
        community.general.proxmox:
          vmid: "{{ lxc_config.container.vmid }}"
          node: "{{ proxmox_node }}"
          api_token_id: "{{ proxmox_api_token_id }}"
          api_token_secret: "{{ proxmox_api_token_secret }}"
          api_host: "{{ proxmox_api_host }}"
          state: started
        no_log: "{{ proxmox_hide_sensitive | default(true) }}"
    rescue:
      - name: Attempt to remove failed LXC container
        community.general.proxmox:
          vmid: "{{ lxc_config.container.vmid }}"
          node: "{{ proxmox_node }}"
          api_token_id: "{{ proxmox_api_token_id }}"
          api_token_secret: "{{ proxmox_api_token_secret }}"
          api_host: "{{ proxmox_api_host }}"
          state: absent
          force: true
        register: proxmox_cleanup
        failed_when: false
        no_log: "{{ proxmox_hide_sensitive | default(true) }}"

- name: Configure container firewall
  when: lxc_config.container.firewall is defined and lxc_config.container.firewall
  vars:
    proxmox_api_base_url: "https://{{ proxmox_api_host }}:8006/api2/json"
    proxmox_api_headers:
      Authorization: "PVEAPIToken={{ proxmox_api_token_id }}={{ proxmox_api_token_secret }}"
    proxmox_firewall_config: {{ lxc_config.container.firewall }}
    proxmox_firewall_options_payload: {{ proxmox_firewall_config | proxmox_firewall_options }}
    proxmox_firewall_rule_payloads: {{ proxmox_firewall_config | proxmox_firewall_rules }}
    proxmox_api_validate_certs: {{ proxmox_validate_certs | default(false) }}
  block:
    - name: Update container firewall defaults
      ansible.builtin.uri:
        url: "{{ proxmox_api_base_url }}/nodes/{{ proxmox_node }}/lxc/{{ lxc_config.container.vmid }}/firewall/options"
        method: PUT
        headers: {{ proxmox_api_headers }}
        body_format: form-urlencoded
        body: {{ proxmox_firewall_options_payload }}
        validate_certs: {{ proxmox_api_validate_certs }}
      when: proxmox_firewall_options_payload | length > 0

    - name: Fetch existing container firewall rules
      ansible.builtin.uri:
        url: "{{ proxmox_api_base_url }}/nodes/{{ proxmox_node }}/lxc/{{ lxc_config.container.vmid }}/firewall/rules"
        method: GET
        headers: {{ proxmox_api_headers }}
        validate_certs: {{ proxmox_api_validate_certs }}
      register: proxmox_firewall_existing
      when: proxmox_firewall_config.rules is defined

    - name: Remove existing container firewall rules
      ansible.builtin.uri:
        url: "{{ proxmox_api_base_url }}/nodes/{{ proxmox_node }}/lxc/{{ lxc_config.container.vmid }}/firewall/rules/{{ item.pos }}"
        method: DELETE
        headers: {{ proxmox_api_headers }}
        validate_certs: {{ proxmox_api_validate_certs }}
      loop: "{{ proxmox_firewall_existing.json.data | default([]) | sort(attribute='pos', reverse=true) }}"
      loop_control:
        label: "{{ item.pos }}"
      when:
        - proxmox_firewall_config.rules is defined
        - proxmox_firewall_existing.json.data is defined
        - proxmox_firewall_existing.json.data | length > 0

    - name: Apply container firewall rules
      ansible.builtin.uri:
        url: "{{ proxmox_api_base_url }}/nodes/{{ proxmox_node }}/lxc/{{ lxc_config.container.vmid }}/firewall/rules"
        method: POST
        headers: {{ proxmox_api_headers }}
        body_format: form-urlencoded
        body: {{ item }}
        validate_certs: {{ proxmox_api_validate_certs }}
      loop: "{{ proxmox_firewall_rule_payloads }}"
      loop_control:
        label: "{{ item.comment | default(item.type | default('rule')) }}"
      when: proxmox_firewall_rule_payloads | length > 0

- name: Start container
  community.general.proxmox:
    vmid: "{{ lxc_config.container.vmid }}"
    node: "{{ proxmox_node }}"
    api_token_id: "{{ proxmox_api_token_id }}"
    api_token_secret: "{{ proxmox_api_token_secret }}"
    api_host: "{{ proxmox_api_host }}"
    state: started

- name: Wait for container SSH
  wait_for:
    host: "{{ container_ip }}"
    port: 22
    timeout: 120

- name: Install packages in container
  delegate_to: "{{ container_ip }}"
  become: true
  apt:
    name: "{{ lxc_config.setup.packages | default([]) }}"
    state: present
    update_cache: yes
  environment:
    DEBIAN_FRONTEND: noninteractive
  when: lxc_config.setup.packages is defined and lxc_config.setup.packages | length > 0

- name: Ensure configuration directories exist
  delegate_to: "{{ container_ip }}"
  become: true
  file:
    path: "{{ (item.path | regex_replace('/[^/]+$', '')) | default('/') }}"
    state: directory
    mode: "{{ item.dir_mode | default('0755') }}"
  loop: "{{ lxc_config.setup.config | default([]) }}"
  when:
    - lxc_config.setup.config is defined
    - item.path is defined
    - item.path | length > 1
    - item.path is string
    - item.path.startswith('/')

- name: Write config files
  delegate_to: "{{ container_ip }}"
  become: true
  copy:
    content: "{{ item.content }}"
    dest: "{{ item.path }}"
    mode: "{{ item.mode | default('0644') }}"
  loop: "{{ lxc_config.setup.config | default([]) }}"

- name: Enable and start services
  delegate_to: "{{ container_ip }}"
  become: true
  systemd:
    name: "{{ item.name }}"
    enabled: "{{ item.enabled | default(true) }}"
    state: "{{ item.state | default('started') }}"
    daemon_reload: true
  loop: "{{ lxc_config.setup.services | default([]) }}"

- name: Run additional setup commands
  delegate_to: "{{ container_ip }}"
  become: true
  command: "{{ item }}"
  loop: "{{ lxc_config.setup.commands | default([]) }}"
  when: lxc_config.setup.commands is defined and lxc_config.setup.commands | length > 0
