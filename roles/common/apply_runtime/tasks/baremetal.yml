---
- name: Determine service unit name
  set_fact:
    effective_service_unit_name: "{{ service_unit_name | default(service_id) }}"

- name: Ensure systemd is the service manager
  assert:
    that:
      - ansible_service_mgr is defined
      - ansible_service_mgr == 'systemd'
    fail_msg: "The target host does not use systemd as the service manager."
    success_msg: "Systemd detected as the service manager."

- name: Set service IP facts
  set_fact:
    service_ip: "{{ service_ip | default(ansible_default_ipv4.address) }}"

- name: Install service packages
  become: true
  apt:
    name: "{{ service_packages }}"
    state: present
    update_cache: yes
  environment:
    DEBIAN_FRONTEND: noninteractive
  when: service_packages is defined and service_packages | length > 0

- name: Deploy service configuration files
  become: true
  copy:
    dest: "{{ item.path }}"
    mode: "{{ item.mode | default('0644') }}"
    content: "{{ item.content }}"
    unsafe_writes: false
  loop: "{{ service_files | default([]) }}"
  notify: Restart service

- name: Copy systemd unit file
  become: true
  copy:
    src: "{{ runtime_config_path }}"
    dest: "/etc/systemd/system/{{ effective_service_unit_name }}.service"
    mode: '0644'
    unsafe_writes: false
  notify: Restart service

- name: Ensure systemd drop-in directory exists
  become: true
  file:
    path: "/etc/systemd/system/{{ effective_service_unit_name }}.service.d"
    state: directory
    mode: '0755'
  when: service_drop_ins is defined and service_drop_ins | length > 0

- name: Deploy systemd drop-in files
  become: true
  copy:
    dest: "/etc/systemd/system/{{ effective_service_unit_name }}.service.d/{{ item.name }}"
    mode: "{{ item.mode | default('0644') }}"
    content: "{{ item.content | default(omit) }}"
    src: "{{ item.src | default(omit) }}"
    unsafe_writes: false
  loop: "{{ service_drop_ins | default([]) }}"
  when: service_drop_ins is defined and service_drop_ins | length > 0
  notify: Restart service

- name: Reload systemd
  become: true
  systemd:
    daemon_reload: yes

- name: Enable service
  become: true
  systemd:
    name: "{{ effective_service_unit_name }}"
    enabled: yes

- name: Start service
  become: true
  systemd:
    name: "{{ effective_service_unit_name }}"
    state: started

- name: Run additional setup commands
  become: true
  command: "{{ item }}"
  loop: "{{ service_commands | default([]) }}"
  when: service_commands is defined and service_commands | length > 0
