---
- name: Resolve Docker secrets
  set_fact:
    compose_secret_env: "{{ secrets.env if secrets is defined and secrets.env is not none and secrets.env | length > 0 else [] }}"
    compose_secret_env_map: "{{ dict(compose_secret_env | map(attribute='name') | zip(compose_secret_env | map(attribute='value'))) if compose_secret_env | length > 0 else {} }}"
    compose_secret_files: "{{ secrets.files if secrets is defined and secrets.files is not none and secrets.files | length > 0 else [] }}"

    compose_secret_shred: "{{ secrets.shred_after_apply | default(true) if secrets is defined else true }}"

    compose_secret_env_path: "{{ runtime_output_dir }}/{{ service_name | default(service_id) }}.env"


- name: Ensure Compose secret directory exists
  file:
    path: "{{ runtime_output_dir }}/secrets"
    state: directory
    mode: '0700'
  when: compose_secret_files | length > 0

- name: Write Compose secret files
  copy:
    dest: "{{ runtime_output_dir }}/secrets/{{ item.name }}"
    mode: "{{ item.mode | default('0400') }}"
    content: "{{ item.value | default(item.content) }}"
  loop: "{{ compose_secret_files }}"
  when: compose_secret_files | length > 0
  no_log: true

- name: Deploy with Docker Compose v2
  community.docker.docker_compose_v2:
    project_src: "{{ runtime_output_dir }}"
    files:
      - "{{ runtime_config_path | basename }}"
    state: present
    pull: always

  environment: "{{ compose_secret_env_map if compose_secret_env_map else omit }}"
  no_log: "{{ compose_secret_env | length > 0 }}"

- name: Remove Compose secret files after apply
  file:
    path: "{{ runtime_output_dir }}/secrets/{{ item.name }}"
    state: absent
  loop: "{{ compose_secret_files }}"
  when:
    - compose_secret_shred | bool
    - compose_secret_files | length > 0



- name: Remove Compose secrets after apply
  ansible.builtin.include_tasks: secret_cleanup.yml
  vars:
    cleanup_secret_env_path: "{{ compose_secret_env_path }}"
    cleanup_secret_env: "{{ compose_secret_env }}"
    cleanup_secret_files: "{{ compose_secret_files }}"
    cleanup_secret_dir: "{{ runtime_output_dir }}/secrets"
    cleanup_secret_shred: "{{ compose_secret_shred }}"


- name: Set service IP for health checks
  set_fact:
    service_ip: "{{ service_ip | default(ansible_default_ipv4.address) }}"
