---
- name: Resolve Docker secrets
  set_fact:
    compose_secret_env: "{{ secrets.env if secrets is defined and secrets.env is not none and secrets.env | length > 0 else [] }}"
    compose_secret_env_map: "{{ dict(compose_secret_env | map(attribute='name') | zip(compose_secret_env | map(attribute='value'))) if compose_secret_env | length > 0 else {} }}"
    compose_secret_files: "{{ secrets.files if secrets is defined and secrets.files is not none and secrets.files | length > 0 else [] }}"

    compose_secret_shred: "{{ secrets.shred_after_apply | default(true) if secrets is defined else true }}"

    compose_secret_env_path: "{{ runtime_output_dir }}/{{ service_name | default(service_id) }}.env"


- name: Register Docker secret shredding handler
  set_fact:
    docker_secret_cleanup:
      env_path: "{{ compose_secret_env_path }}"
      env: "{{ compose_secret_env }}"
      files: "{{ compose_secret_files }}"
      directory: "{{ runtime_output_dir }}/secrets"
      shred: "{{ compose_secret_shred }}"
  when: compose_secret_env | length > 0 or compose_secret_files | length > 0
  notify: docker runtime secret cleanup
  changed_when: true

- name: Ensure Compose secret directory exists
  file:
    path: "{{ runtime_output_dir }}/secrets"
    state: directory
    mode: '0700'
  when: compose_secret_files | length > 0

- name: Write Compose secret files
  copy:
    dest: "{{ runtime_output_dir }}/secrets/{{ item.name }}"
    mode: "{{ item.mode | default('0400') }}"
    content: "{{ item.value | default(item.content) }}"
  loop: "{{ compose_secret_files }}"
  when: compose_secret_files | length > 0
  no_log: true

- name: Verify Docker daemon is running
  ansible.builtin.command: docker info
  register: docker_daemon_info
  changed_when: false

- name: Deploy with Docker Compose v2
  block:
    - name: Deploy Docker Compose project
      community.docker.docker_compose_v2:
        project_src: "{{ runtime_output_dir }}"
        files:
          - "{{ runtime_config_path | basename }}"
        state: present
        pull: always

      environment: "{{ compose_secret_env_map if compose_secret_env_map else omit }}"
      no_log: "{{ compose_secret_env | length > 0 }}"
  rescue:
    - name: Remove failed Docker Compose deployment
      community.docker.docker_compose_v2:
        project_src: "{{ runtime_output_dir }}"
        files:
          - "{{ runtime_config_path | basename }}"
        state: absent
        remove_orphans: true
      ignore_errors: true

    - name: Report Docker Compose failure after cleanup
      ansible.builtin.fail:
        msg: >-
          Docker Compose deployment failed and orphaned containers were removed:
          {{ ansible_failed_result.msg | default(ansible_failed_result.stderr, true) }}

- name: Remove Compose secret files after apply
  ansible.builtin.command:
    cmd: "shred --remove=unlink --zero {{ runtime_output_dir }}/secrets/{{ item.name }}"
  args:
    removes: "{{ runtime_output_dir }}/secrets/{{ item.name }}"
  loop: "{{ compose_secret_files }}"
  when:
    - compose_secret_shred | bool
    - compose_secret_files | length > 0
  no_log: true

- name: Remove Compose secret directory after apply
  ansible.builtin.file:
    path: "{{ runtime_output_dir }}/secrets"
    state: absent
  when:
    - compose_secret_shred | bool
    - compose_secret_files | length > 0



- name: Set service IP for health checks
  set_fact:
    service_ip: "{{ service_ip | default(ansible_default_ipv4.address) }}"
